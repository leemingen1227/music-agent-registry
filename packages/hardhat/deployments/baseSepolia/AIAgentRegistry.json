{
  "address": "0xC4F8CC4b1D595Cce07166F892FAF9Fa7f7067ab8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_musicToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "AgentChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "AgentSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winnerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voterRewards",
          "type": "uint256"
        }
      ],
      "name": "ChallengeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "alignsWithStrategy",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rating",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FeedbackSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "additionalStake",
          "type": "uint256"
        }
      ],
      "name": "StakeIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStrategyHash",
          "type": "string"
        }
      ],
      "name": "StrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEEDBACK_COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAKE_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "agentStrategies",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "aiAgents",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "challengeEndTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "challengeStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVoterStakes",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "initialStrategy",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalRatingPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeedbacks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positiveAlignments",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "challengeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        }
      ],
      "name": "getAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "challengeEndTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "challengeStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        }
      ],
      "name": "getAgentStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFeedbacks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positiveAlignments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averageRating",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        }
      ],
      "name": "getAgentStrategy",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "additionalStake",
          "type": "uint256"
        }
      ],
      "name": "increaseStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastFeedbackTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musicToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "initialStrategy",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "submitAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "alignsWithStrategy",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "rating",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "submitFeedback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "strategyHash",
          "type": "string"
        }
      ],
      "name": "updateAgentStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voterStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc09b36508ef37144a703baaae3b859c9b7bf132505d9cac5c2f7a3686d3dc435",
  "receipt": {
    "to": null,
    "from": "0x96F16eE794a9d4C520F2F8F9548051ec901ED909",
    "contractAddress": "0xC4F8CC4b1D595Cce07166F892FAF9Fa7f7067ab8",
    "transactionIndex": 54,
    "gasUsed": "2315006",
    "logsBloom": "0x
    "blockHash": "0x7cdef3f4999843db498827f75536bdc9212a6aae94a75b652ff9234953f8ccfe",
    "transactionHash": "0xc09b36508ef37144a703baaae3b859c9b7bf132505d9cac5c2f7a3686d3dc435",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 21405739,
        "transactionHash": "0xc09b36508ef37144a703baaae3b859c9b7bf132505d9cac5c2f7a3686d3dc435",
        "address": "0xC4F8CC4b1D595Cce07166F892FAF9Fa7f7067ab8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096f16ee794a9d4c520f2f8f9548051ec901ed909"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x7cdef3f4999843db498827f75536bdc9212a6aae94a75b652ff9234953f8ccfe"
      }
    ],
    "blockNumber": 21405739,
    "cumulativeGasUsed": "9791259",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x31A307fC55979632382FE6E5D71cAea482A18611"
  ],
  "numDeployments": 1,
  "solcInputHash": "5e9b2ce44dca6a6ef69002d735d2418e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_musicToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"AgentChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"AgentSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterRewards\",\"type\":\"uint256\"}],\"name\":\"ChallengeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"alignsWithStrategy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeedbackSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalStake\",\"type\":\"uint256\"}],\"name\":\"StakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStrategyHash\",\"type\":\"string\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEEDBACK_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"agentStrategies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"aiAgents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"challengeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"challengeStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoterStakes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"initialStrategy\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalRatingPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeedbacks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positiveAlignments\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"challengeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"challengeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"challengeStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"}],\"name\":\"getAgentStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFeedbacks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positiveAlignments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"}],\"name\":\"getAgentStrategy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"additionalStake\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFeedbackTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musicToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"}],\"name\":\"resolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initialStrategy\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"submitAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"alignsWithStrategy\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"submitFeedback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"strategyHash\",\"type\":\"string\"}],\"name\":\"updateAgentStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voterStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A decentralized registry for AI music recommendation agents\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AIAgentRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AIAgentRegistry.sol\":\"AIAgentRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AIAgentRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MusicToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title AIAgentRegistry\\n * @dev A decentralized registry for AI music recommendation agents\\n */\\ncontract AIAgentRegistry is Ownable, ReentrancyGuard {\\n    IERC20 public musicToken;\\n    \\n    uint256 public constant MIN_STAKE_AMOUNT = 100 * 10**18; // 100 MUSIC tokens\\n    uint256 public constant CHALLENGE_PERIOD = 3 days;\\n    uint256 public constant REWARD_PERCENTAGE = 70; // 70% goes to winners, 30% to voters\\n    \\n    // Simplified on-chain feedback stats\\n    struct AIAgent {\\n        address owner;\\n        string modelHash;\\n        string metadata;        // IPFS hash containing agent details\\n        uint256 stake;\\n        bool isListed;\\n        uint256 challengeEndTime;\\n        address challenger;\\n        uint256 challengeStake;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 totalVoterStakes;\\n        address[] supportVoters;\\n        address[] againstVoters;\\n        string initialStrategy;  // IPFS hash of initial strategy\\n        // Simplified feedback tracking\\n        uint256 totalRatingPoints;  // Sum of all ratings (1-5)\\n        uint256 totalFeedbacks;     // Count of feedbacks\\n        uint256 positiveAlignments; // Count of strategy-aligned feedbacks\\n    }\\n    \\n    // Feedback event with detailed data\\n    event FeedbackSubmitted(\\n        string indexed modelHash,\\n        address indexed user,\\n        bool alignsWithStrategy,\\n        uint8 rating,\\n        string comment,        // Direct comment text\\n        uint256 timestamp\\n    );\\n\\n    mapping(string => AIAgent) public aiAgents;\\n    mapping(string => mapping(address => bool)) public hasVoted;\\n    mapping(string => mapping(address => uint256)) public voterStakes;\\n    mapping(string => string) public agentStrategies; // modelHash => IPFS strategy hash\\n    mapping(string => mapping(address => uint256)) public lastFeedbackTime;\\n    \\n    // Updated events\\n    event AgentSubmitted(string modelHash, address owner, uint256 stake, string metadata);\\n    event AgentChallenged(string indexed modelHash, address challenger, uint256 stake);\\n    event VoteCast(string indexed modelHash, address voter, bool support, uint256 stake);\\n    event ChallengeResolved(string indexed modelHash, bool accepted, uint256 winnerReward, uint256 voterRewards);\\n    event StakeIncreased(string indexed modelHash, uint256 additionalStake);\\n    event StrategyUpdated(\\n        string indexed modelHash,\\n        string newStrategyHash\\n    );\\n\\n    uint256 public constant FEEDBACK_COOLDOWN = 1 days;  // Minimum time between feedbacks from same user\\n    \\n    constructor(address _musicToken) {\\n        musicToken = IERC20(_musicToken);\\n    }\\n    \\n    function submitAgent(\\n        string memory modelHash, \\n        string memory metadata, \\n        string memory initialStrategy,\\n        uint256 stake\\n    ) \\n        external \\n        nonReentrant \\n    {\\n        require(stake >= MIN_STAKE_AMOUNT, \\\"Insufficient stake\\\");\\n        require(!aiAgents[modelHash].isListed, \\\"Agent already exists\\\");\\n        require(bytes(metadata).length > 0, \\\"Metadata required\\\");\\n        require(bytes(initialStrategy).length > 0, \\\"Initial strategy required\\\");\\n        \\n        musicToken.transferFrom(msg.sender, address(this), stake);\\n        \\n        aiAgents[modelHash] = AIAgent({\\n            owner: msg.sender,\\n            modelHash: modelHash,\\n            metadata: metadata,\\n            stake: stake,\\n            isListed: true,\\n            challengeEndTime: 0,\\n            challenger: address(0),\\n            challengeStake: 0,\\n            votesFor: 0,\\n            votesAgainst: 0,\\n            totalVoterStakes: 0,\\n            supportVoters: new address[](0),\\n            againstVoters: new address[](0),\\n            initialStrategy: initialStrategy,\\n            totalRatingPoints: 0,\\n            totalFeedbacks: 0,\\n            positiveAlignments: 0\\n        });\\n\\n        agentStrategies[modelHash] = initialStrategy;\\n        console.log(\\\"Agent submitted: %s\\\", modelHash);\\n        console.log(\\\"Initial strategy: %s\\\", initialStrategy);\\n        emit AgentSubmitted(modelHash, msg.sender, stake, metadata);\\n        emit StrategyUpdated(modelHash, initialStrategy);\\n    }\\n    \\n    function challengeAgent(string memory modelHash, uint256 stake) \\n        external \\n        nonReentrant \\n    {\\n        require(aiAgents[modelHash].isListed, \\\"Agent not listed\\\");\\n        require(stake >= MIN_STAKE_AMOUNT, \\\"Insufficient challenge stake\\\");\\n        require(aiAgents[modelHash].challengeEndTime == 0, \\\"Already challenged\\\");\\n        \\n        musicToken.transferFrom(msg.sender, address(this), stake);\\n        \\n        AIAgent storage agent = aiAgents[modelHash];\\n        agent.challenger = msg.sender;\\n        agent.challengeStake = stake;\\n        agent.challengeEndTime = block.timestamp + CHALLENGE_PERIOD;\\n        \\n        emit AgentChallenged(modelHash, msg.sender, stake);\\n    }\\n    \\n    function vote(string memory modelHash, bool support, uint256 stake) \\n        external \\n        nonReentrant \\n    {\\n        AIAgent storage agent = aiAgents[modelHash];\\n        require(agent.challengeEndTime > 0, \\\"No active challenge\\\");\\n        require(block.timestamp < agent.challengeEndTime, \\\"Challenge period ended\\\");\\n        require(!hasVoted[modelHash][msg.sender], \\\"Already voted\\\");\\n        require(stake > 0, \\\"Stake must be positive\\\");\\n        \\n        musicToken.transferFrom(msg.sender, address(this), stake);\\n        \\n        if (support) {\\n            agent.votesFor += stake;\\n            agent.supportVoters.push(msg.sender);\\n        } else {\\n            agent.votesAgainst += stake;\\n            agent.againstVoters.push(msg.sender);\\n        }\\n        \\n        agent.totalVoterStakes += stake;\\n        hasVoted[modelHash][msg.sender] = true;\\n        voterStakes[modelHash][msg.sender] = stake;\\n        \\n        emit VoteCast(modelHash, msg.sender, support, stake);\\n    }\\n    \\n    function resolveChallenge(string memory modelHash) \\n        external \\n        nonReentrant \\n    {\\n        AIAgent storage agent = aiAgents[modelHash];\\n        require(agent.challengeEndTime > 0, \\\"No challenge exists\\\");\\n        require(block.timestamp >= agent.challengeEndTime, \\\"Challenge period not ended\\\");\\n        \\n        bool challengeSucceeded = agent.votesAgainst > agent.votesFor;\\n        uint256 totalStake = agent.stake + agent.challengeStake;\\n        uint256 winnerReward = (totalStake * REWARD_PERCENTAGE) / 100;\\n        uint256 voterRewards = totalStake - winnerReward;\\n        \\n        // Distribute rewards\\n        if (challengeSucceeded) {\\n            musicToken.transfer(agent.challenger, winnerReward);\\n            distributeVoterRewards(modelHash, false, voterRewards);\\n            agent.isListed = false;\\n        } else {\\n            musicToken.transfer(agent.owner, winnerReward);\\n            distributeVoterRewards(modelHash, true, voterRewards);\\n        }\\n        \\n        // Clear all voter data\\n        for (uint i = 0; i < agent.supportVoters.length; i++) {\\n            clearVoterData(modelHash, agent.supportVoters[i]);\\n        }\\n        for (uint i = 0; i < agent.againstVoters.length; i++) {\\n            clearVoterData(modelHash, agent.againstVoters[i]);\\n        }\\n        \\n        // Reset challenge data\\n        agent.challengeEndTime = 0;\\n        agent.challenger = address(0);\\n        agent.challengeStake = 0;\\n        agent.votesFor = 0;\\n        agent.votesAgainst = 0;\\n        agent.totalVoterStakes = 0;\\n        delete agent.supportVoters;\\n        delete agent.againstVoters;\\n        \\n        emit ChallengeResolved(modelHash, !challengeSucceeded, winnerReward, voterRewards);\\n    }\\n    \\n    function increaseStake(string memory modelHash, uint256 additionalStake) \\n        external \\n        nonReentrant \\n    {\\n        AIAgent storage agent = aiAgents[modelHash];\\n        require(agent.isListed, \\\"Agent not listed\\\");\\n        require(msg.sender == agent.owner, \\\"Not agent owner\\\");\\n        require(agent.challengeEndTime == 0, \\\"Cannot increase stake during challenge\\\");\\n        \\n        musicToken.transferFrom(msg.sender, address(this), additionalStake);\\n        agent.stake += additionalStake;\\n        \\n        emit StakeIncreased(modelHash, additionalStake);\\n    }\\n    \\n    function distributeVoterRewards(string memory modelHash, bool forWinners, uint256 rewardPool) \\n        private \\n    {\\n        AIAgent storage agent = aiAgents[modelHash];\\n        uint256 winningVotes = forWinners ? agent.votesFor : agent.votesAgainst;\\n        address[] storage voters = forWinners ? agent.supportVoters : agent.againstVoters;\\n        \\n        if (winningVotes > 0) {\\n            // For each voter, calculate their proportion of winning votes\\n            for (uint i = 0; i < voters.length; i++) {\\n                address voter = voters[i];\\n                uint256 voterStake = voterStakes[modelHash][voter];\\n                \\n                // Calculate reward: (voter's stake / total winning votes) * reward pool\\n                uint256 reward = (voterStake * rewardPool) / winningVotes;\\n                if (reward > 0) {\\n                    musicToken.transfer(voter, reward);\\n                }\\n            }\\n        }\\n    }\\n    \\n    // View functions\\n    function getAgent(string memory modelHash) \\n        external \\n        view \\n        returns (\\n            address owner,\\n            string memory metadata,\\n            uint256 stake,\\n            bool isListed,\\n            uint256 challengeEndTime,\\n            address challenger,\\n            uint256 challengeStake,\\n            uint256 votesFor,\\n            uint256 votesAgainst\\n        ) \\n    {\\n        AIAgent storage agent = aiAgents[modelHash];\\n        return (\\n            agent.owner,\\n            agent.metadata,\\n            agent.stake,\\n            agent.isListed,\\n            agent.challengeEndTime,\\n            agent.challenger,\\n            agent.challengeStake,\\n            agent.votesFor,\\n            agent.votesAgainst\\n        );\\n    }\\n\\n    // Add new function to help clear voter data\\n    function clearVoterData(string memory modelHash, address voter) private {\\n        hasVoted[modelHash][voter] = false;\\n        voterStakes[modelHash][voter] = 0;\\n    }\\n\\n    function submitFeedback(\\n        string memory modelHash,\\n        bool alignsWithStrategy,\\n        uint8 rating,\\n        string memory comment    // Direct comment text\\n    ) \\n        external \\n        nonReentrant \\n    {\\n        require(aiAgents[modelHash].isListed, \\\"Agent not listed\\\");\\n        require(rating >= 1 && rating <= 5, \\\"Invalid rating range\\\");\\n        require(\\n            block.timestamp >= lastFeedbackTime[modelHash][msg.sender] + FEEDBACK_COOLDOWN,\\n            \\\"Please wait before submitting another feedback\\\"\\n        );\\n        \\n        AIAgent storage agent = aiAgents[modelHash];\\n        \\n        // Update minimal on-chain stats\\n        agent.totalFeedbacks++;\\n        agent.totalRatingPoints += rating;\\n        if (alignsWithStrategy) {\\n            agent.positiveAlignments++;\\n        }\\n        \\n        lastFeedbackTime[modelHash][msg.sender] = block.timestamp;\\n        \\n        // Emit event with full feedback data including direct comment\\n        emit FeedbackSubmitted(\\n            modelHash,\\n            msg.sender,\\n            alignsWithStrategy,\\n            rating,\\n            comment,\\n            block.timestamp\\n        );\\n    }\\n\\n    // Updated view function for agent stats\\n    function getAgentStats(string memory modelHash) \\n        external \\n        view \\n        returns (\\n            uint256 totalFeedbacks,\\n            uint256 positiveAlignments,\\n            uint256 averageRating  // Scaled by 100\\n        ) \\n    {\\n        AIAgent storage agent = aiAgents[modelHash];\\n        uint256 avgRating = agent.totalFeedbacks > 0 \\n            ? (agent.totalRatingPoints * 100) / agent.totalFeedbacks \\n            : 0;\\n            \\n        return (\\n            agent.totalFeedbacks,\\n            agent.positiveAlignments,\\n            avgRating\\n        );\\n    }\\n\\n    function getAgentStrategy(string memory modelHash) \\n        external \\n        view \\n        returns (string memory) \\n    {\\n        return agentStrategies[modelHash];\\n    }\\n\\n    function updateAgentStrategy(string memory modelHash, string memory strategyHash) \\n        external \\n    {\\n        AIAgent storage agent = aiAgents[modelHash];\\n        require(agent.isListed, \\\"Agent not listed\\\");\\n        // Only allow updates from governance contract\\n        require(msg.sender == owner(), \\\"Only governance can update strategy\\\");\\n        \\n        agentStrategies[modelHash] = strategyHash;\\n        emit StrategyUpdated(modelHash, strategyHash);\\n    }\\n}\",\"keccak256\":\"0x8e253b41194b71d5d9a5f6214e59a4a7435ed2fa7e33bcd2463a60028b10f26e\",\"license\":\"MIT\"},\"contracts/MusicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title MusicToken\\n * @dev ERC20 Token for the AI Agent Registry system\\n */\\ncontract MusicToken is ERC20 {\\n    constructor(uint256 initialSupply) ERC20(\\\"Music Token\\\", \\\"MUSIC\\\") {\\n        _mint(msg.sender, initialSupply);\\n    }\\n} \",\"keccak256\":\"0x484a72b8a5d8c11855dc22b80fecf581b0c99f8facd871ff358206ca0e70be8d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100ab57601f61286238819003918201601f19168301916001600160401b038311848410176100b0578084926020946040528339810103126100ab57516001600160a01b0390818116908190036100ab5760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360018055600254161760025561279b90816100c78239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80630650491c1461203357806327ed71881461200f578063316db10814611e2c578063715018a614611dd3578063794464e914611d075780638da5cb5b14611cde5780638e517fc214611c5e5780639477cdc614611cc05780639689b1a614611c5e578063972072a2146116d75780639860e3451461162e5780639af06cd9146115ed578063a892e2d314610c03578063b6b00b6214610bc7578063bdce23ed14610953578063c3a079ed14610935578063c3bb929f146106e7578063d0e5b9e6146103cb578063d149bb131461027a578063e83aceac14610229578063eb3c79da14610200578063f2fde38b1461013a5763fc72b1ed1461011957600080fd5b3461013557600036600319011261013557602060405160468152f35b600080fd5b34610135576020366003190112610135576004356001600160a01b038181169182900361013557610169612421565b81156101ac57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b34610135576000366003190112610135576002546040516001600160a01b039091168152602090f35b3461013557602061025161023c366123d1565b929081604051938285809451938492016122a9565b810160058152030190209060018060a01b03166000526020526020604060002054604051908152f35b34610135576020366003190112610135576004356001600160401b038111610135576102aa903690600401612222565b60405181818093516020819301916102c1926122a9565b600390820190815203602001902080546001600160a01b039081166102e86001840161232b565b916102f56002850161232b565b93600381015491600482015460ff169360058301549160068401541660078401546008850154600986015491600a87015493600d88016103349061232b565b96600e8901549a600f8a015499601001549a6040519e8f9e8f9a8b526101e08060208d01528b01610364916122cc565b8a810360408c0152610375916122cc565b9860600152151560808d015260a08c015260c08b015260e08a01526101008901526101208801526101408701528581036101608701526103b4916122cc565b926101808501526101a08401526101c08301520390f35b34610135576060366003190112610135576004356001600160401b038111610135576103fb903690600401612222565b610403612412565b9060443561040f612533565b6040519282519160209485818187019561042a8183896122a9565b81016003815203019020600581015480156106ac5742101561066e576040518681875161045881838a6122a9565b8101600481520301902033600052865260ff604060002054166106395781156105fb576002546040516323b872dd60e01b81523360048201523060248201526044810184905295908790879060649082906000906001600160a01b03165af19182156105ef5787606096600a610569937f8f939c0e8da82099bc9be68995da582362fa8d3032227846326c305b0f2d2e379a610585976105c2575b50881561059f57600881016105098982546125c8565b905561051833600b8301612603565b016105248782546125c8565b9055604051828186516105388183876122a9565b810160048152030190203360005282526040600020600160ff198254161790556040518093819286519283916122a9565b8101600581520301902033600052875282604060002055612513565b94604051923384521515908301526040820152a260018055005b600981016105ae8982546125c8565b90556105bd33600c8301612603565b610518565b6105e190853d87116105e8575b6105d98183612201565b810190612479565b508c6104f3565b503d6105cf565b6040513d6000823e3d90fd5b60405162461bcd60e51b81526004810187905260166024820152755374616b65206d75737420626520706f73697469766560501b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b60405162461bcd60e51b815260048101879052601660248201527510da185b1b195b99d9481c195c9a5bd908195b99195960521b6044820152606490fd5b60405162461bcd60e51b81526004810188905260136024820152724e6f20616374697665206368616c6c656e676560681b6044820152606490fd5b34610135576040366003190112610135576001600160401b0360043581811161013557610718903690600401612222565b60243582811161013557610730903690600401612222565b60405192825161076360ff60046020978881818a019661075181838a6122a9565b81016003815203019020015416612589565b6000546001600160a01b031633036108e4578461078b916040518093819288519283916122a9565b810160068152030190209082519081116108ce576107a982546122f1565b601f8111610893575b5084601f821160011461081b57918160008051602061274683398151915295926107f694600091610810575b508160011b916000199060031b1c1916179055612513565b9261080b6040519282849384528301906122cc565b0390a2005b9050850151886107de565b601f1982169083600052866000209160005b8882821061087d575050926107f6949260019282600080516020612746833981519152999610610864575b5050811b019055612513565b87015160001960f88460031b161c191690558880610858565b600184958293958a01518155019401920161082d565b6108be908360005286600020601f840160051c8101918885106108c4575b601f0160051c0190612491565b856107b2565b90915081906108b1565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101869052602360248201527f4f6e6c7920676f7665726e616e63652063616e2075706461746520737472617460448201526265677960e81b6064820152608490fd5b346101355760003660031901126101355760206040516203f4808152f35b34610135576080366003190112610135576001600160401b0360043581811161013557610984903690600401612222565b61098c612412565b916044359060ff821680920361013557606435908111610135576109b4903690600401612222565b906109bd612533565b6040519280516109de60ff600460209788818188019661075181838a6122a9565b600183101580610bbc575b15610b805760405185818451610a008183876122a9565b81016007815203019020336000528552604060002054620151808101809111610b6a574210610b0e5791610ac97f5fa068720b0fff575600cb435c75fbf51a167ed1d1e7eb57e37d027a6fe5bcab9492610aad87610ae69660405182818651610a6a8183876122a9565b81016003815203019020600f8101610a82815461265e565b90558b600e8201610a948982546125c8565b9055610af9575b506040518093819286519283916122a9565b8101600781520301902033600052875242604060002055612513565b9460405196151587528601526080604086015260808501906122cc565b924260608201528033940390a360018055005b601001610b06815461265e565b90558b610a9b565b60405162461bcd60e51b815260048101869052602e60248201527f506c656173652077616974206265666f7265207375626d697474696e6720616e60448201526d6f7468657220666565646261636b60901b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152600481018690526014602482015273496e76616c696420726174696e672072616e676560601b6044820152606490fd5b5060058311156109e9565b34610135576020610bda61023c366123d1565b810160078152030190209060018060a01b03166000526020526020604060002054604051908152f35b34610135576080366003190112610135576004356001600160401b03811161013557610c33903690600401612222565b6024356001600160401b03811161013557610c52903690600401612222565b906044356001600160401b03811161013557610c72903690600401612222565b91610c7b612533565b68056bc75e2d63100000606435106115b35760ff60046040516020818651610ca68183858b016122a9565b6003818301528101030190200154166115775780511561153e578251156114f9576002546040516323b872dd60e01b81523360048201523060248201526064803560448301529091602091839182906000906001600160a01b03165af180156105ef576114da575b50604051610d1b816121cb565b60008152604051610d2b816121cb565b6000815260405191826102208101106001600160401b03610220850111176108ce576102208301604052338352846020840152836040840152606435606084015260016080840152600060a0840152600060c0840152600060e0840152600061010084015260006101208401526000610140840152610160830152610180820152836101a082015260006101c082015260006101e082015260006102008201526040516020818551610de08183858a016122a9565b810160038152030190209060018060a01b038151166001600160601b0360a01b83541617825560208101518051906001600160401b0382116108ce578190610e2b60018601546122f1565b601f81116114a5575b50602090601f831160011461143357600092611428575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116108ce578190610e8860028601546122f1565b601f81116113f3575b50602090601f831160011461138157600092611376575b50508160011b916000199060031b1c19161760028301555b60608101516003830155600482016080820151151560ff8019835416911617905560a081015160058301556006820160018060a01b0360c0830151166001600160601b0360a01b82541617905560e0810151600783015561010081015160088301556101208101516009830155610140810151600a8301556101608101518051906001600160401b0382116108ce576020600b850191610f6084846124df565b0190600052602060002060005b83811061135957505050506101808101518051906001600160401b0382116108ce576020600c850191610fa084846124df565b0190600052602060002060005b83811061133c57505050506101a08101518051906001600160401b0382116108ce57610fdc600d8501546122f1565b601f8111611307575b50602090601f83116001146112915791806010949261020094600092611286575b50508160011b916000199060031b1c191617600d8501555b6101c0810151600e8501556101e0810151600f8501550151910155604051602081845161104e81838589016122a9565b8101600681520301902083516001600160401b0381116108ce5761107282546122f1565b601f8111611254575b506020601f82116001146111b35761118261119f9461118a948460008051602061274683398151915298957f0f0edca2e192c0b6c3286bb05c5742ee74c6acb70650dbf52bf3a7d71e8a3d79956000916111a8575b508160011b916000199060031b1c19161790555b611119846040516110f4816121e6565b60138152724167656e74207375626d69747465643a20257360681b60208201526126dd565b61114f88604051611129816121e6565b6014815273496e697469616c2073747261746567793a20257360601b60208201526126dd565b6040519182916080835261116660808401876122cc565b90336020850152606435604085015283820360608501526122cc565b0390a1612513565b926040519182916020835260208301906122cc565b0390a260018055005b90508a01518b6110d0565b601f198216908360005260206000209160005b81811061123c57509461118a946001857f0f0edca2e192c0b6c3286bb05c5742ee74c6acb70650dbf52bf3a7d71e8a3d7995611182956000805160206127468339815191529b9861119f9b10611223575b5050811b0190556110e4565b8c015160001960f88460031b161c191690558b80611217565b9192602060018192868c0151815501940192016111c6565b61128090836000526020600020601f840160051c810191602085106108c457601f0160051c0190612491565b8561107b565b015190508980611006565b90600d850160005260206000209160005b601f19851681106112ef575092601094926001926102009583601f198116106112d6575b505050811b01600d85015561101e565b015160001960f88460031b161c191690558980806112c6565b919260206001819286850151815501940192016112a2565b61133690600d86016000526020600020601f850160051c810191602086106108c457601f0160051c0190612491565b87610fe5565b82516001600160a01b031681830155602090920191600101610fad565b82516001600160a01b031681830155602090920191600101610f6d565b015190508780610ea8565b9250600285016000526020600020906000935b601f19841685106113d8576001945083601f198116106113bf575b505050811b016002830155610ec0565b015160001960f88460031b161c191690558780806113af565b81810151835560209485019460019093019290910190611394565b61142290600287016000526020600020601f850160051c810191602086106108c457601f0160051c0190612491565b88610e91565b015190508780610e4b565b9250600185016000526020600020906000935b601f198416851061148a576001945083601f19811610611471575b505050811b016001830155610e63565b015160001960f88460031b161c19169055878080611461565b81810151835560209485019460019093019290910190611446565b6114d490600187016000526020600020601f850160051c810191602086106108c457601f0160051c0190612491565b88610e34565b6114f29060203d6020116105e8576105d98183612201565b5083610d0e565b60405162461bcd60e51b815260206004820152601960248201527f496e697469616c207374726174656779207265717569726564000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601160248201527013595d1859185d18481c995c5d5a5c9959607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152734167656e7420616c72656164792065786973747360601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e74207374616b6560701b6044820152606490fd5b3461013557602061160061023c366123d1565b810160048152030190209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b34610135576020366003190112610135576004356001600160401b038111610135576020611663611676923690600401612222565b81604051938285809451938492016122a9565b600390820190815203019020600f81015480156116ca57600e82015491606483029280840460641490151715610b6a5760106116b48360609561263e565b915b015460405192835260208301526040820152f35b60609160106000916116b6565b34610135576020366003190112610135576004356001600160401b03811161013557611707903690600401612222565b61170f612533565b604051602081835161172481838588016122a9565b8101600381520301902060058101548015611c23574210611bde5760098101546008820154109061175e60038201546007830154906125c8565b906046820282810460461483151715610b6a578260648204810311610b6a578315611a4757600254600683015460405163a9059cbb60e01b81526001600160a01b0391821660048201526064840460248201529160209183916044918391600091165af180156105ef57611a28575b5060405160208187516117e38183858c016122a9565b8101600381520301902060098101549081611928575b505060048201805460ff191690559192915b600b82019260005b845481101561184f578061184561182d61184a93886125d5565b905460039190911b1c6001600160a01b03168961266d565b61265e565b611813565b5085949293600c8501939060005b8554811015611894578061184561187761188f93896125d5565b905460039190911b1c6001600160a01b03168a61266d565b61185d565b50611909876119047f5d8d2094010c42d169641988d8bab4a6cf7e371ba43d34c523aa68c7e33ea22a976118ff6064956000600a60609b9d826005820155600681016001600160601b0360a01b815416905582600782015582600882015582600982015501556124bb565b6124bb565b612513565b956040519315845281810460208501520490036040820152a260018055005b9093929460005b600c830154811015611a1b5761194881600c85016125d5565b60018060a01b0391549060031b1c16906040516020818161196f8d838151938492016122a9565b810160058152030190208260005260205261199d876119986064880489036040600020546124a8565b61263e565b91826119b4575b506119af915061265e565b61192f565b60025460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019490945260209184916044918391600091165af19182156105ef576119af92156119a457611a149060203d6020116105e8576105d98183612201565b50896119a4565b50949293505085806117f9565b611a409060203d6020116105e8576105d98183612201565b50856117cd565b600254825460405163a9059cbb60e01b81526001600160a01b0391821660048201526064840460248201529160209183916044918391600091165af180156105ef57611bbf575b506040516020818751611aa48183858c016122a9565b8101600381520301902060088101549081611ac4575b505092919261180b565b9093929460005b600b830154811015611bb257611ae481600b85016125d5565b60018060a01b0391549060031b1c169060405160208181611b0b8d838151938492016122a9565b8101600581520301902082600052602052611b34876119986064880489036040600020546124a8565b9182611b4b575b50611b46915061265e565b611acb565b60025460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019490945260209184916044918391600091165af19182156105ef57611b469215611b3b57611bab9060203d6020116105e8576105d98183612201565b5089611b3b565b5094929350508580611aba565b611bd79060203d6020116105e8576105d98183612201565b5085611a8e565b60405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e676520706572696f64206e6f7420656e6465640000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152724e6f206368616c6c656e67652065786973747360681b6044820152606490fd5b34610135576020366003190112610135576004356001600160401b03811161013557611ca8611c996020611663611cbc943690600401612222565b8101600681520301902061232b565b6040519182916020835260208301906122cc565b0390f35b34610135576000366003190112610135576020604051620151808152f35b34610135576000366003190112610135576000546040516001600160a01b039091168152602090f35b34610135576020366003190112610135576004356001600160401b038111610135576020611663611d3c923690600401612222565b8101600381520301902060018060a01b0390818154169060038101549060ff60048201541693600582015490600683015416600783015490600884015492611d8b60026009870154960161232b565b97611da8604051998a998a526101208060208c01528a01906122cc565b96604089015215156060880152608087015260a086015260c085015260e08401526101008301520390f35b3461013557600036600319011261013557611dec612421565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461013557611e3a36612278565b90611e43612533565b604051815190611e6460ff600460209384818189019761075181838b6122a9565b68056bc75e2d631000008410611fcb57600560405182818651611e888183896122a9565b810160038152030190200154611f92576002546040516323b872dd60e01b81523360048201523060248201526044810186905292908290849060649082906000906001600160a01b03165af19283156105ef57611ef593611f7557506040518093819286519283916122a9565b8101600381520301902060068101336001600160601b0360a01b8254161790558260078201556203f480420190814211610b6a577fcbde0a5ea91f4bccc6a7e2d42767f017c2bb5c3b0448688d74122bb9029df4369261119f926005611f5c930155612513565b6040805133815260208101959095529093918291820190565b611f8b90833d85116105e8576105d98183612201565b5085610a9b565b6064906040519062461bcd60e51b825260048201526012602482015271105b1c9958591e4818da185b1b195b99d95960721b6044820152fd5b6064906040519062461bcd60e51b82526004820152601c60248201527f496e73756666696369656e74206368616c6c656e6765207374616b65000000006044820152fd5b3461013557600036600319011261013557602060405168056bc75e2d631000008152f35b346101355761204136612278565b9061204a612533565b604051808251602092816120628593838589016122a9565b810160038152030190209161207d60ff600485015416612589565b82546001600160a01b039081163303612194576005840154612140576002546040516323b872dd60e01b8152336004820152306024820152604481018790529291849184916064918391600091165af180156105ef577f70f290ad78e67aaeac597cb6b5c277a925608ad638170c7608f9f212841b46c79461211593600392612123575b500161210e8682546125c8565b9055612513565b92604051908152a260018055005b61213990863d88116105e8576105d98183612201565b5087612101565b60405162461bcd60e51b815260048101849052602660248201527f43616e6e6f7420696e637265617365207374616b6520647572696e67206368616044820152656c6c656e676560d01b6064820152608490fd5b60405162461bcd60e51b815260048101849052600f60248201526e2737ba1030b3b2b73a1037bbb732b960891b6044820152606490fd5b602081019081106001600160401b038211176108ce57604052565b604081019081106001600160401b038211176108ce57604052565b90601f801991011681019081106001600160401b038211176108ce57604052565b81601f82011215610135578035906001600160401b0382116108ce5760405192612256601f8401601f191660200185612201565b8284526020838301011161013557816000926020809301838601378301015290565b604060031982011261013557600435906001600160401b038211610135576122a291600401612222565b9060243590565b60005b8381106122bc5750506000910152565b81810151838201526020016122ac565b906020916122e5815180928185528580860191016122a9565b601f01601f1916010190565b90600182811c92168015612321575b602083101461230b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612300565b906040519182600082549261233f846122f1565b9081845260019485811690816000146123ae575060011461236b575b505061236992500383612201565b565b9093915060005260209081600020936000915b8183106123965750506123699350820101388061235b565b8554888401850152948501948794509183019161237e565b91505061236994506020925060ff191682840152151560051b820101388061235b565b604060031982011261013557600435906001600160401b038211610135576123fb91600401612222565b906024356001600160a01b03811681036101355790565b60243590811515820361013557565b6000546001600160a01b0316330361243557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610135575180151581036101355790565b81811061249c575050565b60008155600101612491565b81810292918115918404141715610b6a57565b805460008255806124ca575050565b61236991600052602060002090810190612491565b90600160401b81116108ce578154908083558181106124fd57505050565b6123699260005260206000209182019101612491565b61252b906020604051928284809451938492016122a9565b810103902090565b600260015414612544576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b1561259057565b60405162461bcd60e51b815260206004820152601060248201526f1059d95b9d081b9bdd081b1a5cdd195960821b6044820152606490fd5b91908201809211610b6a57565b80548210156125ed5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b8054600160401b8110156108ce57612620916001820181556125d5565b819291549060031b9160018060a01b03809116831b921b1916179055565b8115612648570490565b634e487b7160e01b600052601260045260246000fd5b6000198114610b6a5760010190565b60206126c3916040519080519183818184019461268b8183886122a9565b810160048152030190209460018060a01b031694856000528352604060002060ff1981541690556040519384928392519283916122a9565b810160058152030190209060005260205260006040812055565b6000919061272461273284936040519283916127126020840196634b5c427760e01b88526040602486015260648501906122cc565b838103602319016044850152906122cc565b03601f198101835282612201565b51906a636f6e736f6c652e6c6f675afa5056fe9a5ad21e6f8a2a4c177c4e30129c29600e7d2f295a5e89ea1825bd992781f429a26469706673582212209eb46b68c38e432d7f36976072ed7f1f2971239594232b49fbad4e677b26bf3964736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630650491c1461203357806327ed71881461200f578063316db10814611e2c578063715018a614611dd3578063794464e914611d075780638da5cb5b14611cde5780638e517fc214611c5e5780639477cdc614611cc05780639689b1a614611c5e578063972072a2146116d75780639860e3451461162e5780639af06cd9146115ed578063a892e2d314610c03578063b6b00b6214610bc7578063bdce23ed14610953578063c3a079ed14610935578063c3bb929f146106e7578063d0e5b9e6146103cb578063d149bb131461027a578063e83aceac14610229578063eb3c79da14610200578063f2fde38b1461013a5763fc72b1ed1461011957600080fd5b3461013557600036600319011261013557602060405160468152f35b600080fd5b34610135576020366003190112610135576004356001600160a01b038181169182900361013557610169612421565b81156101ac57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b34610135576000366003190112610135576002546040516001600160a01b039091168152602090f35b3461013557602061025161023c366123d1565b929081604051938285809451938492016122a9565b810160058152030190209060018060a01b03166000526020526020604060002054604051908152f35b34610135576020366003190112610135576004356001600160401b038111610135576102aa903690600401612222565b60405181818093516020819301916102c1926122a9565b600390820190815203602001902080546001600160a01b039081166102e86001840161232b565b916102f56002850161232b565b93600381015491600482015460ff169360058301549160068401541660078401546008850154600986015491600a87015493600d88016103349061232b565b96600e8901549a600f8a015499601001549a6040519e8f9e8f9a8b526101e08060208d01528b01610364916122cc565b8a810360408c0152610375916122cc565b9860600152151560808d015260a08c015260c08b015260e08a01526101008901526101208801526101408701528581036101608701526103b4916122cc565b926101808501526101a08401526101c08301520390f35b34610135576060366003190112610135576004356001600160401b038111610135576103fb903690600401612222565b610403612412565b9060443561040f612533565b6040519282519160209485818187019561042a8183896122a9565b81016003815203019020600581015480156106ac5742101561066e576040518681875161045881838a6122a9565b8101600481520301902033600052865260ff604060002054166106395781156105fb576002546040516323b872dd60e01b81523360048201523060248201526044810184905295908790879060649082906000906001600160a01b03165af19182156105ef5787606096600a610569937f8f939c0e8da82099bc9be68995da582362fa8d3032227846326c305b0f2d2e379a610585976105c2575b50881561059f57600881016105098982546125c8565b905561051833600b8301612603565b016105248782546125c8565b9055604051828186516105388183876122a9565b810160048152030190203360005282526040600020600160ff198254161790556040518093819286519283916122a9565b8101600581520301902033600052875282604060002055612513565b94604051923384521515908301526040820152a260018055005b600981016105ae8982546125c8565b90556105bd33600c8301612603565b610518565b6105e190853d87116105e8575b6105d98183612201565b810190612479565b508c6104f3565b503d6105cf565b6040513d6000823e3d90fd5b60405162461bcd60e51b81526004810187905260166024820152755374616b65206d75737420626520706f73697469766560501b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b60405162461bcd60e51b815260048101879052601660248201527510da185b1b195b99d9481c195c9a5bd908195b99195960521b6044820152606490fd5b60405162461bcd60e51b81526004810188905260136024820152724e6f20616374697665206368616c6c656e676560681b6044820152606490fd5b34610135576040366003190112610135576001600160401b0360043581811161013557610718903690600401612222565b60243582811161013557610730903690600401612222565b60405192825161076360ff60046020978881818a019661075181838a6122a9565b81016003815203019020015416612589565b6000546001600160a01b031633036108e4578461078b916040518093819288519283916122a9565b810160068152030190209082519081116108ce576107a982546122f1565b601f8111610893575b5084601f821160011461081b57918160008051602061274683398151915295926107f694600091610810575b508160011b916000199060031b1c1916179055612513565b9261080b6040519282849384528301906122cc565b0390a2005b9050850151886107de565b601f1982169083600052866000209160005b8882821061087d575050926107f6949260019282600080516020612746833981519152999610610864575b5050811b019055612513565b87015160001960f88460031b161c191690558880610858565b600184958293958a01518155019401920161082d565b6108be908360005286600020601f840160051c8101918885106108c4575b601f0160051c0190612491565b856107b2565b90915081906108b1565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101869052602360248201527f4f6e6c7920676f7665726e616e63652063616e2075706461746520737472617460448201526265677960e81b6064820152608490fd5b346101355760003660031901126101355760206040516203f4808152f35b34610135576080366003190112610135576001600160401b0360043581811161013557610984903690600401612222565b61098c612412565b916044359060ff821680920361013557606435908111610135576109b4903690600401612222565b906109bd612533565b6040519280516109de60ff600460209788818188019661075181838a6122a9565b600183101580610bbc575b15610b805760405185818451610a008183876122a9565b81016007815203019020336000528552604060002054620151808101809111610b6a574210610b0e5791610ac97f5fa068720b0fff575600cb435c75fbf51a167ed1d1e7eb57e37d027a6fe5bcab9492610aad87610ae69660405182818651610a6a8183876122a9565b81016003815203019020600f8101610a82815461265e565b90558b600e8201610a948982546125c8565b9055610af9575b506040518093819286519283916122a9565b8101600781520301902033600052875242604060002055612513565b9460405196151587528601526080604086015260808501906122cc565b924260608201528033940390a360018055005b601001610b06815461265e565b90558b610a9b565b60405162461bcd60e51b815260048101869052602e60248201527f506c656173652077616974206265666f7265207375626d697474696e6720616e60448201526d6f7468657220666565646261636b60901b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152600481018690526014602482015273496e76616c696420726174696e672072616e676560601b6044820152606490fd5b5060058311156109e9565b34610135576020610bda61023c366123d1565b810160078152030190209060018060a01b03166000526020526020604060002054604051908152f35b34610135576080366003190112610135576004356001600160401b03811161013557610c33903690600401612222565b6024356001600160401b03811161013557610c52903690600401612222565b906044356001600160401b03811161013557610c72903690600401612222565b91610c7b612533565b68056bc75e2d63100000606435106115b35760ff60046040516020818651610ca68183858b016122a9565b6003818301528101030190200154166115775780511561153e578251156114f9576002546040516323b872dd60e01b81523360048201523060248201526064803560448301529091602091839182906000906001600160a01b03165af180156105ef576114da575b50604051610d1b816121cb565b60008152604051610d2b816121cb565b6000815260405191826102208101106001600160401b03610220850111176108ce576102208301604052338352846020840152836040840152606435606084015260016080840152600060a0840152600060c0840152600060e0840152600061010084015260006101208401526000610140840152610160830152610180820152836101a082015260006101c082015260006101e082015260006102008201526040516020818551610de08183858a016122a9565b810160038152030190209060018060a01b038151166001600160601b0360a01b83541617825560208101518051906001600160401b0382116108ce578190610e2b60018601546122f1565b601f81116114a5575b50602090601f831160011461143357600092611428575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b0382116108ce578190610e8860028601546122f1565b601f81116113f3575b50602090601f831160011461138157600092611376575b50508160011b916000199060031b1c19161760028301555b60608101516003830155600482016080820151151560ff8019835416911617905560a081015160058301556006820160018060a01b0360c0830151166001600160601b0360a01b82541617905560e0810151600783015561010081015160088301556101208101516009830155610140810151600a8301556101608101518051906001600160401b0382116108ce576020600b850191610f6084846124df565b0190600052602060002060005b83811061135957505050506101808101518051906001600160401b0382116108ce576020600c850191610fa084846124df565b0190600052602060002060005b83811061133c57505050506101a08101518051906001600160401b0382116108ce57610fdc600d8501546122f1565b601f8111611307575b50602090601f83116001146112915791806010949261020094600092611286575b50508160011b916000199060031b1c191617600d8501555b6101c0810151600e8501556101e0810151600f8501550151910155604051602081845161104e81838589016122a9565b8101600681520301902083516001600160401b0381116108ce5761107282546122f1565b601f8111611254575b506020601f82116001146111b35761118261119f9461118a948460008051602061274683398151915298957f0f0edca2e192c0b6c3286bb05c5742ee74c6acb70650dbf52bf3a7d71e8a3d79956000916111a8575b508160011b916000199060031b1c19161790555b611119846040516110f4816121e6565b60138152724167656e74207375626d69747465643a20257360681b60208201526126dd565b61114f88604051611129816121e6565b6014815273496e697469616c2073747261746567793a20257360601b60208201526126dd565b6040519182916080835261116660808401876122cc565b90336020850152606435604085015283820360608501526122cc565b0390a1612513565b926040519182916020835260208301906122cc565b0390a260018055005b90508a01518b6110d0565b601f198216908360005260206000209160005b81811061123c57509461118a946001857f0f0edca2e192c0b6c3286bb05c5742ee74c6acb70650dbf52bf3a7d71e8a3d7995611182956000805160206127468339815191529b9861119f9b10611223575b5050811b0190556110e4565b8c015160001960f88460031b161c191690558b80611217565b9192602060018192868c0151815501940192016111c6565b61128090836000526020600020601f840160051c810191602085106108c457601f0160051c0190612491565b8561107b565b015190508980611006565b90600d850160005260206000209160005b601f19851681106112ef575092601094926001926102009583601f198116106112d6575b505050811b01600d85015561101e565b015160001960f88460031b161c191690558980806112c6565b919260206001819286850151815501940192016112a2565b61133690600d86016000526020600020601f850160051c810191602086106108c457601f0160051c0190612491565b87610fe5565b82516001600160a01b031681830155602090920191600101610fad565b82516001600160a01b031681830155602090920191600101610f6d565b015190508780610ea8565b9250600285016000526020600020906000935b601f19841685106113d8576001945083601f198116106113bf575b505050811b016002830155610ec0565b015160001960f88460031b161c191690558780806113af565b81810151835560209485019460019093019290910190611394565b61142290600287016000526020600020601f850160051c810191602086106108c457601f0160051c0190612491565b88610e91565b015190508780610e4b565b9250600185016000526020600020906000935b601f198416851061148a576001945083601f19811610611471575b505050811b016001830155610e63565b015160001960f88460031b161c19169055878080611461565b81810151835560209485019460019093019290910190611446565b6114d490600187016000526020600020601f850160051c810191602086106108c457601f0160051c0190612491565b88610e34565b6114f29060203d6020116105e8576105d98183612201565b5083610d0e565b60405162461bcd60e51b815260206004820152601960248201527f496e697469616c207374726174656779207265717569726564000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601160248201527013595d1859185d18481c995c5d5a5c9959607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152734167656e7420616c72656164792065786973747360601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e74207374616b6560701b6044820152606490fd5b3461013557602061160061023c366123d1565b810160048152030190209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b34610135576020366003190112610135576004356001600160401b038111610135576020611663611676923690600401612222565b81604051938285809451938492016122a9565b600390820190815203019020600f81015480156116ca57600e82015491606483029280840460641490151715610b6a5760106116b48360609561263e565b915b015460405192835260208301526040820152f35b60609160106000916116b6565b34610135576020366003190112610135576004356001600160401b03811161013557611707903690600401612222565b61170f612533565b604051602081835161172481838588016122a9565b8101600381520301902060058101548015611c23574210611bde5760098101546008820154109061175e60038201546007830154906125c8565b906046820282810460461483151715610b6a578260648204810311610b6a578315611a4757600254600683015460405163a9059cbb60e01b81526001600160a01b0391821660048201526064840460248201529160209183916044918391600091165af180156105ef57611a28575b5060405160208187516117e38183858c016122a9565b8101600381520301902060098101549081611928575b505060048201805460ff191690559192915b600b82019260005b845481101561184f578061184561182d61184a93886125d5565b905460039190911b1c6001600160a01b03168961266d565b61265e565b611813565b5085949293600c8501939060005b8554811015611894578061184561187761188f93896125d5565b905460039190911b1c6001600160a01b03168a61266d565b61185d565b50611909876119047f5d8d2094010c42d169641988d8bab4a6cf7e371ba43d34c523aa68c7e33ea22a976118ff6064956000600a60609b9d826005820155600681016001600160601b0360a01b815416905582600782015582600882015582600982015501556124bb565b6124bb565b612513565b956040519315845281810460208501520490036040820152a260018055005b9093929460005b600c830154811015611a1b5761194881600c85016125d5565b60018060a01b0391549060031b1c16906040516020818161196f8d838151938492016122a9565b810160058152030190208260005260205261199d876119986064880489036040600020546124a8565b61263e565b91826119b4575b506119af915061265e565b61192f565b60025460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019490945260209184916044918391600091165af19182156105ef576119af92156119a457611a149060203d6020116105e8576105d98183612201565b50896119a4565b50949293505085806117f9565b611a409060203d6020116105e8576105d98183612201565b50856117cd565b600254825460405163a9059cbb60e01b81526001600160a01b0391821660048201526064840460248201529160209183916044918391600091165af180156105ef57611bbf575b506040516020818751611aa48183858c016122a9565b8101600381520301902060088101549081611ac4575b505092919261180b565b9093929460005b600b830154811015611bb257611ae481600b85016125d5565b60018060a01b0391549060031b1c169060405160208181611b0b8d838151938492016122a9565b8101600581520301902082600052602052611b34876119986064880489036040600020546124a8565b9182611b4b575b50611b46915061265e565b611acb565b60025460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019490945260209184916044918391600091165af19182156105ef57611b469215611b3b57611bab9060203d6020116105e8576105d98183612201565b5089611b3b565b5094929350508580611aba565b611bd79060203d6020116105e8576105d98183612201565b5085611a8e565b60405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e676520706572696f64206e6f7420656e6465640000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152724e6f206368616c6c656e67652065786973747360681b6044820152606490fd5b34610135576020366003190112610135576004356001600160401b03811161013557611ca8611c996020611663611cbc943690600401612222565b8101600681520301902061232b565b6040519182916020835260208301906122cc565b0390f35b34610135576000366003190112610135576020604051620151808152f35b34610135576000366003190112610135576000546040516001600160a01b039091168152602090f35b34610135576020366003190112610135576004356001600160401b038111610135576020611663611d3c923690600401612222565b8101600381520301902060018060a01b0390818154169060038101549060ff60048201541693600582015490600683015416600783015490600884015492611d8b60026009870154960161232b565b97611da8604051998a998a526101208060208c01528a01906122cc565b96604089015215156060880152608087015260a086015260c085015260e08401526101008301520390f35b3461013557600036600319011261013557611dec612421565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461013557611e3a36612278565b90611e43612533565b604051815190611e6460ff600460209384818189019761075181838b6122a9565b68056bc75e2d631000008410611fcb57600560405182818651611e888183896122a9565b810160038152030190200154611f92576002546040516323b872dd60e01b81523360048201523060248201526044810186905292908290849060649082906000906001600160a01b03165af19283156105ef57611ef593611f7557506040518093819286519283916122a9565b8101600381520301902060068101336001600160601b0360a01b8254161790558260078201556203f480420190814211610b6a577fcbde0a5ea91f4bccc6a7e2d42767f017c2bb5c3b0448688d74122bb9029df4369261119f926005611f5c930155612513565b6040805133815260208101959095529093918291820190565b611f8b90833d85116105e8576105d98183612201565b5085610a9b565b6064906040519062461bcd60e51b825260048201526012602482015271105b1c9958591e4818da185b1b195b99d95960721b6044820152fd5b6064906040519062461bcd60e51b82526004820152601c60248201527f496e73756666696369656e74206368616c6c656e6765207374616b65000000006044820152fd5b3461013557600036600319011261013557602060405168056bc75e2d631000008152f35b346101355761204136612278565b9061204a612533565b604051808251602092816120628593838589016122a9565b810160038152030190209161207d60ff600485015416612589565b82546001600160a01b039081163303612194576005840154612140576002546040516323b872dd60e01b8152336004820152306024820152604481018790529291849184916064918391600091165af180156105ef577f70f290ad78e67aaeac597cb6b5c277a925608ad638170c7608f9f212841b46c79461211593600392612123575b500161210e8682546125c8565b9055612513565b92604051908152a260018055005b61213990863d88116105e8576105d98183612201565b5087612101565b60405162461bcd60e51b815260048101849052602660248201527f43616e6e6f7420696e637265617365207374616b6520647572696e67206368616044820152656c6c656e676560d01b6064820152608490fd5b60405162461bcd60e51b815260048101849052600f60248201526e2737ba1030b3b2b73a1037bbb732b960891b6044820152606490fd5b602081019081106001600160401b038211176108ce57604052565b604081019081106001600160401b038211176108ce57604052565b90601f801991011681019081106001600160401b038211176108ce57604052565b81601f82011215610135578035906001600160401b0382116108ce5760405192612256601f8401601f191660200185612201565b8284526020838301011161013557816000926020809301838601378301015290565b604060031982011261013557600435906001600160401b038211610135576122a291600401612222565b9060243590565b60005b8381106122bc5750506000910152565b81810151838201526020016122ac565b906020916122e5815180928185528580860191016122a9565b601f01601f1916010190565b90600182811c92168015612321575b602083101461230b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612300565b906040519182600082549261233f846122f1565b9081845260019485811690816000146123ae575060011461236b575b505061236992500383612201565b565b9093915060005260209081600020936000915b8183106123965750506123699350820101388061235b565b8554888401850152948501948794509183019161237e565b91505061236994506020925060ff191682840152151560051b820101388061235b565b604060031982011261013557600435906001600160401b038211610135576123fb91600401612222565b906024356001600160a01b03811681036101355790565b60243590811515820361013557565b6000546001600160a01b0316330361243557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610135575180151581036101355790565b81811061249c575050565b60008155600101612491565b81810292918115918404141715610b6a57565b805460008255806124ca575050565b61236991600052602060002090810190612491565b90600160401b81116108ce578154908083558181106124fd57505050565b6123699260005260206000209182019101612491565b61252b906020604051928284809451938492016122a9565b810103902090565b600260015414612544576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b1561259057565b60405162461bcd60e51b815260206004820152601060248201526f1059d95b9d081b9bdd081b1a5cdd195960821b6044820152606490fd5b91908201809211610b6a57565b80548210156125ed5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b8054600160401b8110156108ce57612620916001820181556125d5565b819291549060031b9160018060a01b03809116831b921b1916179055565b8115612648570490565b634e487b7160e01b600052601260045260246000fd5b6000198114610b6a5760010190565b60206126c3916040519080519183818184019461268b8183886122a9565b810160048152030190209460018060a01b031694856000528352604060002060ff1981541690556040519384928392519283916122a9565b810160058152030190209060005260205260006040812055565b6000919061272461273284936040519283916127126020840196634b5c427760e01b88526040602486015260648501906122cc565b838103602319016044850152906122cc565b03601f198101835282612201565b51906a636f6e736f6c652e6c6f675afa5056fe9a5ad21e6f8a2a4c177c4e30129c29600e7d2f295a5e89ea1825bd992781f429a26469706673582212209eb46b68c38e432d7f36976072ed7f1f2971239594232b49fbad4e677b26bf3964736f6c63430008140033",
  "devdoc": {
    "details": "A decentralized registry for AI music recommendation agents",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AIAgentRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 904,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "musicToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)842"
      },
      {
        "astId": 973,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "aiAgents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(AIAgent)954_storage)"
      },
      {
        "astId": 979,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "hasVoted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 985,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "voterStakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 989,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "agentStrategies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 995,
        "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
        "label": "lastFeedbackTime",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)842": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(AIAgent)954_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct AIAgentRegistry.AIAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(AIAgent)954_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AIAgent)954_storage": {
        "encoding": "inplace",
        "label": "struct AIAgentRegistry.AIAgent",
        "members": [
          {
            "astId": 919,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 921,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "modelHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 923,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "metadata",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 925,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "stake",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 927,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "isListed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 929,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "challengeEndTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 931,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "challenger",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 933,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "challengeStake",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 935,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "votesFor",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 937,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "votesAgainst",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 939,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "totalVoterStakes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 942,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "supportVoters",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 945,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "againstVoters",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 947,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "initialStrategy",
            "offset": 0,
            "slot": "13",
            "type": "t_string_storage"
          },
          {
            "astId": 949,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "totalRatingPoints",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 951,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "totalFeedbacks",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 953,
            "contract": "contracts/AIAgentRegistry.sol:AIAgentRegistry",
            "label": "positiveAlignments",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}