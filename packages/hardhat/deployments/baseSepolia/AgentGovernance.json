{
  "address": "0x4e02dE0C6DaA8Cd746dDd249649C04544D79f526",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_musicToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agentRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStrategy",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_PROPOSE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentRegistry",
      "outputs": [
        {
          "internalType": "contract IAIAgentRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newStrategy",
          "type": "string"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newStrategy",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musicToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "newStrategy",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30a812ef43ff6dfa6f9b62ee534536a7fbfa118de1a333e6737ad0d6bc5c74cd",
  "receipt": {
    "to": null,
    "from": "0x96F16eE794a9d4C520F2F8F9548051ec901ED909",
    "contractAddress": "0x4e02dE0C6DaA8Cd746dDd249649C04544D79f526",
    "transactionIndex": 39,
    "gasUsed": "1277965",
    "logsBloom": "0x
    "blockHash": "0x3d573d41bb66f30bc47bf23123093e879b97323ea4d586b4696ee1b3d0657268",
    "transactionHash": "0x30a812ef43ff6dfa6f9b62ee534536a7fbfa118de1a333e6737ad0d6bc5c74cd",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 21518519,
        "transactionHash": "0x30a812ef43ff6dfa6f9b62ee534536a7fbfa118de1a333e6737ad0d6bc5c74cd",
        "address": "0x4e02dE0C6DaA8Cd746dDd249649C04544D79f526",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096f16ee794a9d4c520f2f8f9548051ec901ed909"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x3d573d41bb66f30bc47bf23123093e879b97323ea4d586b4696ee1b3d0657268"
      }
    ],
    "blockNumber": 21518519,
    "cumulativeGasUsed": "22459990",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x31A307fC55979632382FE6E5D71cAea482A18611",
    "0x43E39Bc12C41af967b3fCC3f8cF5a7b02e8898c2"
  ],
  "numDeployments": 2,
  "solcInputHash": "26a2597b9bcdb8f75e018cf22ba206a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_musicToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agentRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStrategy\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_PROPOSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRegistry\",\"outputs\":[{\"internalType\":\"contract IAIAgentRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newStrategy\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newStrategy\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musicToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"newStrategy\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AgentGovernance.sol\":\"AgentGovernance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AgentGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IAIAgentRegistry {\\n    function aiAgents(address) external view returns (\\n        string memory metadata,\\n        uint256 stake,\\n        bool isListed,\\n        uint256 challengeEndTime,\\n        address challenger,\\n        uint256 challengeStake,\\n        uint256 votesFor,\\n        uint256 votesAgainst,\\n        uint256 totalVoterStakes\\n    );\\n\\n    function updateAgentStrategy(address modelAddress, string memory strategy) external;\\n}\\n\\ncontract AgentGovernance is Ownable, ReentrancyGuard {\\n    IERC20 public musicToken;\\n    IAIAgentRegistry public agentRegistry;\\n    \\n    struct Proposal {\\n        uint256 id;\\n        address proposer;\\n        address agentAddress;      // Which agent to modify\\n        string description;        // e.g., \\\"recommend more rnb music\\\"\\n        string ipfsMetadata;       // Additional details about the proposal\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool executed;\\n        string newStrategy;        // New strategy string\\n        mapping(address => bool) hasVoted;\\n    }\\n    \\n    uint256 public constant VOTING_PERIOD = 3 days;\\n    uint256 public constant MIN_TOKENS_TO_PROPOSE = 100 * 10**18; // 100 tokens\\n    \\n    mapping(uint256 => Proposal) public proposals;\\n    uint256 public proposalCount;\\n    \\n    event ProposalCreated(\\n        uint256 indexed proposalId,\\n        address agentAddress,\\n        string description,\\n        string newStrategy,\\n        address proposer\\n    );\\n    event VoteCast(\\n        uint256 indexed proposalId,\\n        address voter,\\n        bool support\\n    );\\n    event ProposalExecuted(\\n        uint256 indexed proposalId,\\n        address agentAddress,\\n        bool accepted\\n    );\\n    \\n    constructor(address _musicToken, address _agentRegistry) {\\n        musicToken = IERC20(_musicToken);\\n        agentRegistry = IAIAgentRegistry(_agentRegistry);\\n    }\\n    \\n    function createProposal(\\n        address agentAddress,\\n        string memory description,\\n        string memory ipfsMetadata,\\n        string memory newStrategy\\n    ) external nonReentrant {\\n        require(\\n            musicToken.balanceOf(msg.sender) >= MIN_TOKENS_TO_PROPOSE,\\n            \\\"Not enough tokens to propose\\\"\\n        );\\n        \\n        // Check if agent exists and is listed in the TCR\\n        (,, bool isListed,,,,,,) = agentRegistry.aiAgents(agentAddress);\\n        require(isListed, \\\"Agent not listed in TCR\\\");\\n        require(bytes(newStrategy).length > 0, \\\"Strategy required\\\");\\n        \\n        proposalCount++;\\n        Proposal storage proposal = proposals[proposalCount];\\n        \\n        proposal.id = proposalCount;\\n        proposal.proposer = msg.sender;\\n        proposal.agentAddress = agentAddress;\\n        proposal.description = description;\\n        proposal.ipfsMetadata = ipfsMetadata;\\n        proposal.newStrategy = newStrategy;\\n        proposal.startTime = block.timestamp;\\n        proposal.endTime = block.timestamp + VOTING_PERIOD;\\n        \\n        emit ProposalCreated(\\n            proposalCount,\\n            agentAddress,\\n            description,\\n            newStrategy,\\n            msg.sender\\n        );\\n    }\\n    \\n    function vote(uint256 proposalId, bool support) external nonReentrant {\\n        Proposal storage proposal = proposals[proposalId];\\n        \\n        require(block.timestamp <= proposal.endTime, \\\"Voting ended\\\");\\n        require(!proposal.hasVoted[msg.sender], \\\"Already voted\\\");\\n        \\n        // Check if agent is still listed when voting\\n        (,, bool isListed,,,,,,) = agentRegistry.aiAgents(proposal.agentAddress);\\n        require(isListed, \\\"Agent no longer listed in TCR\\\");\\n        \\n        uint256 voterPower = musicToken.balanceOf(msg.sender);\\n        require(voterPower > 0, \\\"No voting power\\\");\\n        \\n        if (support) {\\n            proposal.votesFor += voterPower;\\n        } else {\\n            proposal.votesAgainst += voterPower;\\n        }\\n        \\n        proposal.hasVoted[msg.sender] = true;\\n        \\n        emit VoteCast(proposalId, msg.sender, support);\\n    }\\n    \\n    function executeProposal(uint256 proposalId) external nonReentrant {\\n        Proposal storage proposal = proposals[proposalId];\\n        \\n        require(block.timestamp > proposal.endTime, \\\"Voting still active\\\");\\n        require(!proposal.executed, \\\"Already executed\\\");\\n        \\n        // Check if agent is still listed when executing\\n        (,, bool isListed,,,,,,) = agentRegistry.aiAgents(proposal.agentAddress);\\n        require(isListed, \\\"Agent no longer listed in TCR\\\");\\n        \\n        bool accepted = proposal.votesFor > proposal.votesAgainst;\\n        proposal.executed = true;\\n\\n        if (accepted) {\\n            // Update the agent's strategy if proposal is accepted\\n            agentRegistry.updateAgentStrategy(\\n                proposal.agentAddress,\\n                proposal.newStrategy\\n            );\\n        }\\n        \\n        emit ProposalExecuted(proposalId, proposal.agentAddress, accepted);\\n    }\\n    \\n    // View functions\\n    function getProposal(uint256 proposalId) external view returns (\\n        address proposer,\\n        address agentAddress,\\n        string memory description,\\n        string memory ipfsMetadata,\\n        string memory newStrategy,\\n        uint256 votesFor,\\n        uint256 votesAgainst,\\n        uint256 endTime,\\n        bool executed\\n    ) {\\n        Proposal storage proposal = proposals[proposalId];\\n        return (\\n            proposal.proposer,\\n            proposal.agentAddress,\\n            proposal.description,\\n            proposal.ipfsMetadata,\\n            proposal.newStrategy,\\n            proposal.votesFor,\\n            proposal.votesAgainst,\\n            proposal.endTime,\\n            proposal.executed\\n        );\\n    }\\n    \\n    function hasVoted(uint256 proposalId, address voter) external view returns (bool) {\\n        return proposals[proposalId].hasVoted[voter];\\n    }\\n}\",\"keccak256\":\"0x1983a003f48dec4f82d3685c0a073c404a204f8add8ffb1368e05e427ba79349\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100c757601f61156438819003918201601f19168301916001600160401b038311848410176100cc5780849260409485528339810103126100c757610052602061004b836100e2565b92016100e2565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055168360025416176002551690600354161760035561146d90816100f78239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100c75756fe6080604052600436101561001257600080fd5b6000803560e01c8063013cf08b14610fa95780630d1cfcae14610f805780630d61b51914610cc65780634385963214610c71578063715018a614610c175780638da5cb5b14610bf05780639dae1e7714610567578063b1610d7e14610549578063b6de6d1f14610525578063c7f758a814610450578063c9d27afe146101cb578063da35c664146101ad578063eb3c79da146101845763f2fde38b146100b757600080fd5b34610181576020366003190112610181576100d06111f5565b6100d861126e565b6001600160a01b0390811690811561012d57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b50346101815780600319360112610181576002546040516001600160a01b039091168152602090f35b50346101815780600319360112610181576020600554604051908152f35b5034610181576040366003190112610181576004356024803590811515820361044c576101f6611395565b82845260206004815260408520916008830154421161041a57600b8301923360005283835260ff604060002054166103e6576003546002820154604051633bdd6b1760e11b81526001600160a01b03918216600482015291899083908690829085165afa9081156103db57610275869286948c916103b0575b506113eb565b60025416604051948580926370a0823160e01b82523360048301525afa9283156103a5578893610371575b50821561033c57509161031c939185937fe71fcdac32df1877c1700e7bda2a03157e20993363a28fc35ac495cefc76e4d4966000146103265760056102e89101918254611372565b90555b33600081815292909152604091829020805460ff191660011790558151908152911515602083015290918291820190565b0390a26001805580f35b60066103359101918254611372565b90556102eb565b83600f6064926040519262461bcd60e51b845260048401528201526e2737903b37ba34b733903837bbb2b960891b6044820152fd5b9092508381813d831161039e575b61038981836110cf565b81010312610399575191386102a0565b600080fd5b503d61037f565b6040513d8a823e3d90fd5b6103cc91503d808e833e6103c481836110cf565b8101906112c6565b5050505050509150503861026f565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260048101849052600d818401526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b90600c6064926040519262461bcd60e51b845260048401528201526b159bdd1a5b99c8195b99195960a21b6044820152fd5b8380fd5b503461018157602036600319011261018157604090600435815260046020522060018060a01b03806001830154169060028301541691600581015490600681015460088201549061050960ff600985015416936104fb6104b260038301611107565b916104ed6104ce600a6104c760048501611107565b9301611107565b936040519b8c9b8c5260208c01526101208060408d01528b01906111d0565b9089820360608b01526111d0565b9087820360808901526111d0565b9360a086015260c085015260e084015215156101008301520390f35b5034610181578060031936011261018157602060405168056bc75e2d631000008152f35b503461018157806003193601126101815760206040516203f4808152f35b5034610181576080366003190112610181576105816111f5565b60243567ffffffffffffffff8111610bec576105a1903690600401611227565b9060443567ffffffffffffffff811161044c576105c2903690600401611227565b9060643567ffffffffffffffff8111610be8576105e3903690600401611227565b6105eb611395565b6002546040516370a0823160e01b81523360048201526001600160a01b0394916020908290602490829089165afa8015610b5d578790610bad575b68056bc75e2d63100000915010610b6857602486856003541660405192838092633bdd6b1760e11b825289891660048301525afa908115610b5d578791610b3a575b5015610af557815115610abc576005546000198114610844576001019081600555818752600460205260408720918255600182016bffffffffffffffffffffffff60a01b903382825416179055600283019086861690825416179055855167ffffffffffffffff81116109ef576106e26003840154611095565b601f8111610a78575b50806020601f8211600114610a0e578991610a03575b508160011b916000199060031b1c19161760038301555b80519067ffffffffffffffff82116109ef5781906107396004850154611095565b601f811161099f575b50602090601f8311600114610930578992610925575b50508160011b916000199060031b1c19161760048201555b815167ffffffffffffffff81116109115761078e600a830154611095565b601f81116108cd575b50806020601f8211600114610863578891610858575b508160011b916000199060031b1c191617600a8201555b4260078201556203f48042019081421161084457916108349160087f92aacf8dbc845727da92b41a0d1678fb42e984e58b11f746faf6f8b2bde2da609695940155610826600554966040519586951685526080602086015260808501906111d0565b9083820360408501526111d0565b3360608301520390a26001805580f35b634e487b7160e01b87526011600452602487fd5b9050830151386107ad565b9150600a830188526020882088925b601f19831684106108b5576001935082601f1981161061089c575b5050811b01600a8201556107c4565b85015160001960f88460031b161c19169055388061088d565b85810151825560209384019360019092019101610872565b600a8301885260208820601f830160051c81016020841061090a575b601f830160051c820181106108ff575050610797565b8981556001016108e9565b50806108e9565b634e487b7160e01b87526041600452602487fd5b015190503880610758565b9250600484018952602089209089935b601f1984168510610984576001945083601f1981161061096b575b505050811b016004820155610770565b015160001960f88460031b161c1916905538808061095b565b81810151835560209485019460019093019290910190610940565b90915060048401895260208920601f840160051c8101602085106109e8575b90849392915b601f830160051c820181106109da575050610742565b8b81558594506001016109c4565b50806109be565b634e487b7160e01b88526041600452602488fd5b905087015138610701565b91506003840189526020892089925b601f1983168410610a60576001935082601f19811610610a47575b5050811b016003830155610718565b89015160001960f88460031b161c191690553880610a38565b89810151825560209384019360019092019101610a1d565b60038401895260208920601f830160051c810160208410610ab5575b601f830160051c82018110610aaa5750506106eb565b8a8155600101610a94565b5080610a94565b60405162461bcd60e51b815260206004820152601160248201527014dd1c985d1959de481c995c5d5a5c9959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4167656e74206e6f74206c697374656420696e205443520000000000000000006044820152606490fd5b610b4e91503d8089833e6103c481836110cf565b50505050505091505038610668565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320746f2070726f706f7365000000006044820152606490fd5b506020813d602011610be0575b81610bc7602093836110cf565b810103126103995768056bc75e2d631000009051610626565b3d9150610bba565b8480fd5b8280fd5b5034610181578060031936011261018157546040516001600160a01b039091168152602090f35b5034610181578060031936011261018157610c3061126e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610181576040366003190112610181576024356001600160a01b0381169190829003610399576040600b9160043581526004602052200190600052602052602060ff604060002054166040519015158152f35b503461018157602080600319360112610f7c57600435610ce4611395565b80835260048252604083206008810154421115610f4157600981019283549160ff8316610f095760018060a01b03918683600354166002840193602483878754169360405192838092633bdd6b1760e11b82528760048301525afa8015610efe57610d55918591610eea57506113eb565b6005810154600682015410968760019a8b60ff19809416179055610dbf575b8554604080519189166001600160a01b03168252891515602083015285918c918c917f4fce71a6eb6a89b3e4c71722f870a263627cbfddc3a603c307803d89ad39e7cb9190a2805580f35b600a8760035416920194823b15610be8578a90604051968795633e3bfb6560e01b875260048701526040602487015286938688835492610dfe84611095565b9687604485015284169384600014610ec95750505050600114610e8b575b5050508383809203925af18015610b5d57610e3b575b86818080610d74565b67ffffffffffffffff8197929711610e7757604052947f4fce71a6eb6a89b3e4c71722f870a263627cbfddc3a603c307803d89ad39e7cb610e32565b634e487b7160e01b82526041600452602482fd5b86528086208693508c905b838510610eae57505050508201606401838380610e1c565b8054898601606401528e9750889650938201938d9101610e96565b91969350919650869450606493501682840152151560051b82010192610e1c565b6103cc91503d8087833e6103c481836110cf565b6040513d86823e3d90fd5b60405162461bcd60e51b815260048101839052601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018490526013602482015272566f74696e67207374696c6c2061637469766560681b6044820152606490fd5b5080fd5b50346101815780600319360112610181576003546040516001600160a01b039091168152602090f35b50346101815760203660031901126101815760406020916004358152600483522061109181549160018060a01b03806001830154169060028301541691610ff260038201611107565b92610fff60048301611107565b93600583015494611065600685015491611057600787015494600888015496611032600a60ff60098c0154169a01611107565b996040519e8f9e8f908152015260408d015260608c61016091829101528c01906111d0565b908a820360808c01526111d0565b9560a089015260c088015260e087015261010086015215156101208501528382036101408501526111d0565b0390f35b90600182811c921680156110c5575b60208310146110af57565b634e487b7160e01b600052602260045260246000fd5b91607f16916110a4565b90601f8019910116810190811067ffffffffffffffff8211176110f157604052565b634e487b7160e01b600052604160045260246000fd5b906040519182600082549261111b84611095565b90818452600194858116908160001461118a5750600114611147575b5050611145925003836110cf565b565b9093915060005260209081600020936000915b81831061117257505061114593508201013880611137565b8554888401850152948501948794509183019161115a565b91505061114594506020925060ff191682840152151560051b8201013880611137565b60005b8381106111c05750506000910152565b81810151838201526020016111b0565b906020916111e9815180928185528580860191016111ad565b601f01601f1916010190565b600435906001600160a01b038216820361039957565b67ffffffffffffffff81116110f157601f01601f191660200190565b81601f820112156103995780359061123e8261120b565b9261124c60405194856110cf565b8284526020838301011161039957816000926020809301838601378301015290565b6000546001600160a01b0316330361128257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906101208282031261039957815167ffffffffffffffff811161039957820181601f820112156103995780516112fb8161120b565b9261130960405194856110cf565b818452602082840101116103995761132791602080850191016111ad565b91602082015191604081015180151581036103995791606082015191608081015160018060a01b0381168103610399579160a08201519160c08101519161010060e083015192015190565b9190820180921161137f57565b634e487b7160e01b600052601160045260246000fd5b6002600154146113a6576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b156113f257565b60405162461bcd60e51b815260206004820152601d60248201527f4167656e74206e6f206c6f6e676572206c697374656420696e205443520000006044820152606490fdfea264697066735822122057ce59dc918b8bccb234fb3d258c1e8891b157ff1feb8ce946af1ffd350336c264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8063013cf08b14610fa95780630d1cfcae14610f805780630d61b51914610cc65780634385963214610c71578063715018a614610c175780638da5cb5b14610bf05780639dae1e7714610567578063b1610d7e14610549578063b6de6d1f14610525578063c7f758a814610450578063c9d27afe146101cb578063da35c664146101ad578063eb3c79da146101845763f2fde38b146100b757600080fd5b34610181576020366003190112610181576100d06111f5565b6100d861126e565b6001600160a01b0390811690811561012d57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b50346101815780600319360112610181576002546040516001600160a01b039091168152602090f35b50346101815780600319360112610181576020600554604051908152f35b5034610181576040366003190112610181576004356024803590811515820361044c576101f6611395565b82845260206004815260408520916008830154421161041a57600b8301923360005283835260ff604060002054166103e6576003546002820154604051633bdd6b1760e11b81526001600160a01b03918216600482015291899083908690829085165afa9081156103db57610275869286948c916103b0575b506113eb565b60025416604051948580926370a0823160e01b82523360048301525afa9283156103a5578893610371575b50821561033c57509161031c939185937fe71fcdac32df1877c1700e7bda2a03157e20993363a28fc35ac495cefc76e4d4966000146103265760056102e89101918254611372565b90555b33600081815292909152604091829020805460ff191660011790558151908152911515602083015290918291820190565b0390a26001805580f35b60066103359101918254611372565b90556102eb565b83600f6064926040519262461bcd60e51b845260048401528201526e2737903b37ba34b733903837bbb2b960891b6044820152fd5b9092508381813d831161039e575b61038981836110cf565b81010312610399575191386102a0565b600080fd5b503d61037f565b6040513d8a823e3d90fd5b6103cc91503d808e833e6103c481836110cf565b8101906112c6565b5050505050509150503861026f565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260048101849052600d818401526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b90600c6064926040519262461bcd60e51b845260048401528201526b159bdd1a5b99c8195b99195960a21b6044820152fd5b8380fd5b503461018157602036600319011261018157604090600435815260046020522060018060a01b03806001830154169060028301541691600581015490600681015460088201549061050960ff600985015416936104fb6104b260038301611107565b916104ed6104ce600a6104c760048501611107565b9301611107565b936040519b8c9b8c5260208c01526101208060408d01528b01906111d0565b9089820360608b01526111d0565b9087820360808901526111d0565b9360a086015260c085015260e084015215156101008301520390f35b5034610181578060031936011261018157602060405168056bc75e2d631000008152f35b503461018157806003193601126101815760206040516203f4808152f35b5034610181576080366003190112610181576105816111f5565b60243567ffffffffffffffff8111610bec576105a1903690600401611227565b9060443567ffffffffffffffff811161044c576105c2903690600401611227565b9060643567ffffffffffffffff8111610be8576105e3903690600401611227565b6105eb611395565b6002546040516370a0823160e01b81523360048201526001600160a01b0394916020908290602490829089165afa8015610b5d578790610bad575b68056bc75e2d63100000915010610b6857602486856003541660405192838092633bdd6b1760e11b825289891660048301525afa908115610b5d578791610b3a575b5015610af557815115610abc576005546000198114610844576001019081600555818752600460205260408720918255600182016bffffffffffffffffffffffff60a01b903382825416179055600283019086861690825416179055855167ffffffffffffffff81116109ef576106e26003840154611095565b601f8111610a78575b50806020601f8211600114610a0e578991610a03575b508160011b916000199060031b1c19161760038301555b80519067ffffffffffffffff82116109ef5781906107396004850154611095565b601f811161099f575b50602090601f8311600114610930578992610925575b50508160011b916000199060031b1c19161760048201555b815167ffffffffffffffff81116109115761078e600a830154611095565b601f81116108cd575b50806020601f8211600114610863578891610858575b508160011b916000199060031b1c191617600a8201555b4260078201556203f48042019081421161084457916108349160087f92aacf8dbc845727da92b41a0d1678fb42e984e58b11f746faf6f8b2bde2da609695940155610826600554966040519586951685526080602086015260808501906111d0565b9083820360408501526111d0565b3360608301520390a26001805580f35b634e487b7160e01b87526011600452602487fd5b9050830151386107ad565b9150600a830188526020882088925b601f19831684106108b5576001935082601f1981161061089c575b5050811b01600a8201556107c4565b85015160001960f88460031b161c19169055388061088d565b85810151825560209384019360019092019101610872565b600a8301885260208820601f830160051c81016020841061090a575b601f830160051c820181106108ff575050610797565b8981556001016108e9565b50806108e9565b634e487b7160e01b87526041600452602487fd5b015190503880610758565b9250600484018952602089209089935b601f1984168510610984576001945083601f1981161061096b575b505050811b016004820155610770565b015160001960f88460031b161c1916905538808061095b565b81810151835560209485019460019093019290910190610940565b90915060048401895260208920601f840160051c8101602085106109e8575b90849392915b601f830160051c820181106109da575050610742565b8b81558594506001016109c4565b50806109be565b634e487b7160e01b88526041600452602488fd5b905087015138610701565b91506003840189526020892089925b601f1983168410610a60576001935082601f19811610610a47575b5050811b016003830155610718565b89015160001960f88460031b161c191690553880610a38565b89810151825560209384019360019092019101610a1d565b60038401895260208920601f830160051c810160208410610ab5575b601f830160051c82018110610aaa5750506106eb565b8a8155600101610a94565b5080610a94565b60405162461bcd60e51b815260206004820152601160248201527014dd1c985d1959de481c995c5d5a5c9959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4167656e74206e6f74206c697374656420696e205443520000000000000000006044820152606490fd5b610b4e91503d8089833e6103c481836110cf565b50505050505091505038610668565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320746f2070726f706f7365000000006044820152606490fd5b506020813d602011610be0575b81610bc7602093836110cf565b810103126103995768056bc75e2d631000009051610626565b3d9150610bba565b8480fd5b8280fd5b5034610181578060031936011261018157546040516001600160a01b039091168152602090f35b5034610181578060031936011261018157610c3061126e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610181576040366003190112610181576024356001600160a01b0381169190829003610399576040600b9160043581526004602052200190600052602052602060ff604060002054166040519015158152f35b503461018157602080600319360112610f7c57600435610ce4611395565b80835260048252604083206008810154421115610f4157600981019283549160ff8316610f095760018060a01b03918683600354166002840193602483878754169360405192838092633bdd6b1760e11b82528760048301525afa8015610efe57610d55918591610eea57506113eb565b6005810154600682015410968760019a8b60ff19809416179055610dbf575b8554604080519189166001600160a01b03168252891515602083015285918c918c917f4fce71a6eb6a89b3e4c71722f870a263627cbfddc3a603c307803d89ad39e7cb9190a2805580f35b600a8760035416920194823b15610be8578a90604051968795633e3bfb6560e01b875260048701526040602487015286938688835492610dfe84611095565b9687604485015284169384600014610ec95750505050600114610e8b575b5050508383809203925af18015610b5d57610e3b575b86818080610d74565b67ffffffffffffffff8197929711610e7757604052947f4fce71a6eb6a89b3e4c71722f870a263627cbfddc3a603c307803d89ad39e7cb610e32565b634e487b7160e01b82526041600452602482fd5b86528086208693508c905b838510610eae57505050508201606401838380610e1c565b8054898601606401528e9750889650938201938d9101610e96565b91969350919650869450606493501682840152151560051b82010192610e1c565b6103cc91503d8087833e6103c481836110cf565b6040513d86823e3d90fd5b60405162461bcd60e51b815260048101839052601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018490526013602482015272566f74696e67207374696c6c2061637469766560681b6044820152606490fd5b5080fd5b50346101815780600319360112610181576003546040516001600160a01b039091168152602090f35b50346101815760203660031901126101815760406020916004358152600483522061109181549160018060a01b03806001830154169060028301541691610ff260038201611107565b92610fff60048301611107565b93600583015494611065600685015491611057600787015494600888015496611032600a60ff60098c0154169a01611107565b996040519e8f9e8f908152015260408d015260608c61016091829101528c01906111d0565b908a820360808c01526111d0565b9560a089015260c088015260e087015261010086015215156101208501528382036101408501526111d0565b0390f35b90600182811c921680156110c5575b60208310146110af57565b634e487b7160e01b600052602260045260246000fd5b91607f16916110a4565b90601f8019910116810190811067ffffffffffffffff8211176110f157604052565b634e487b7160e01b600052604160045260246000fd5b906040519182600082549261111b84611095565b90818452600194858116908160001461118a5750600114611147575b5050611145925003836110cf565b565b9093915060005260209081600020936000915b81831061117257505061114593508201013880611137565b8554888401850152948501948794509183019161115a565b91505061114594506020925060ff191682840152151560051b8201013880611137565b60005b8381106111c05750506000910152565b81810151838201526020016111b0565b906020916111e9815180928185528580860191016111ad565b601f01601f1916010190565b600435906001600160a01b038216820361039957565b67ffffffffffffffff81116110f157601f01601f191660200190565b81601f820112156103995780359061123e8261120b565b9261124c60405194856110cf565b8284526020838301011161039957816000926020809301838601378301015290565b6000546001600160a01b0316330361128257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906101208282031261039957815167ffffffffffffffff811161039957820181601f820112156103995780516112fb8161120b565b9261130960405194856110cf565b818452602082840101116103995761132791602080850191016111ad565b91602082015191604081015180151581036103995791606082015191608081015160018060a01b0381168103610399579160a08201519160c08101519161010060e083015192015190565b9190820180921161137f57565b634e487b7160e01b600052601160045260246000fd5b6002600154146113a6576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b156113f257565b60405162461bcd60e51b815260206004820152601d60248201527f4167656e74206e6f206c6f6e676572206c697374656420696e205443520000006044820152606490fdfea264697066735822122057ce59dc918b8bccb234fb3d258c1e8891b157ff1feb8ce946af1ffd350336c264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2019,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "musicToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)842"
      },
      {
        "astId": 2022,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "agentRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IAIAgentRegistry)2012"
      },
      {
        "astId": 2064,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Proposal)2049_storage)"
      },
      {
        "astId": 2066,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "proposalCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAIAgentRegistry)2012": {
        "encoding": "inplace",
        "label": "contract IAIAgentRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)842": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)2049_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AgentGovernance.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)2049_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)2049_storage": {
        "encoding": "inplace",
        "label": "struct AgentGovernance.Proposal",
        "members": [
          {
            "astId": 2024,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2026,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2028,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "agentAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2030,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2032,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "ipfsMetadata",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2034,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "votesFor",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2036,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "votesAgainst",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2038,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "startTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2040,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "endTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2042,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "executed",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 2044,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "newStrategy",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2048,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "hasVoted",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}