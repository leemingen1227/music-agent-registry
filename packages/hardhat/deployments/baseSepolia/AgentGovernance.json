{
  "address": "0xe8A47E4Ada2C29A7AD07417140EdCcc63D45ca7e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_musicToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agentRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "agentHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_PROPOSE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentRegistry",
      "outputs": [
        {
          "internalType": "contract IAIAgentRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "agentHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "agentHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newStrategyHash",
          "type": "string"
        }
      ],
      "name": "createStrategyProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "agentHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "musicToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "agentHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "newStrategyHash",
          "type": "string"
        },
        {
          "internalType": "enum AgentGovernance.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c9c61903965375ea4e38a88715b898f006798e59cc965d7916121173a759243",
  "receipt": {
    "to": null,
    "from": "0x96F16eE794a9d4C520F2F8F9548051ec901ED909",
    "contractAddress": "0xe8A47E4Ada2C29A7AD07417140EdCcc63D45ca7e",
    "transactionIndex": 38,
    "gasUsed": "1661855",
    "logsBloom": "0x
    "blockHash": "0x92bdb162451b868d6731fc4964aa2ca62fe2712c6919433eb30fe2a52b457ee7",
    "transactionHash": "0x1c9c61903965375ea4e38a88715b898f006798e59cc965d7916121173a759243",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 21405744,
        "transactionHash": "0x1c9c61903965375ea4e38a88715b898f006798e59cc965d7916121173a759243",
        "address": "0xe8A47E4Ada2C29A7AD07417140EdCcc63D45ca7e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096f16ee794a9d4c520f2f8f9548051ec901ed909"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x92bdb162451b868d6731fc4964aa2ca62fe2712c6919433eb30fe2a52b457ee7"
      }
    ],
    "blockNumber": 21405744,
    "cumulativeGasUsed": "5559467",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x31A307fC55979632382FE6E5D71cAea482A18611",
    "0xC4F8CC4b1D595Cce07166F892FAF9Fa7f7067ab8"
  ],
  "numDeployments": 1,
  "solcInputHash": "5e9b2ce44dca6a6ef69002d735d2418e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_musicToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agentRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_PROPOSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRegistry\",\"outputs\":[{\"internalType\":\"contract IAIAgentRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"agentHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"agentHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newStrategyHash\",\"type\":\"string\"}],\"name\":\"createStrategyProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agentHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"musicToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"agentHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"newStrategyHash\",\"type\":\"string\"},{\"internalType\":\"enum AgentGovernance.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AgentGovernance.sol\":\"AgentGovernance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AgentGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IAIAgentRegistry {\\n    function aiAgents(string memory) external view returns (\\n        address owner,\\n        string memory modelHash,\\n        string memory metadata,\\n        uint256 stake,\\n        bool isListed,\\n        uint256 challengeEndTime,\\n        address challenger,\\n        uint256 challengeStake,\\n        uint256 votesFor,\\n        uint256 votesAgainst,\\n        uint256 totalVoterStakes\\n    );\\n\\n    function updateAgentStrategy(string memory modelHash, string memory strategyHash) external;\\n}\\n\\ncontract AgentGovernance is Ownable, ReentrancyGuard {\\n    IERC20 public musicToken;\\n    IAIAgentRegistry public agentRegistry;\\n    \\n    struct Proposal {\\n        uint256 id;\\n        address proposer;\\n        string agentHash;          // Which agent to modify\\n        string description;        // e.g., \\\"recommend more rnb music\\\"\\n        string ipfsMetadata;       // Additional details about the proposal\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool executed;\\n        string newStrategyHash;    // IPFS hash of the new strategy\\n        ProposalType proposalType; // Type of proposal\\n        mapping(address => bool) hasVoted;\\n    }\\n    \\n    enum ProposalType {\\n        GENERAL,\\n        STRATEGY_UPDATE\\n    }\\n    \\n    uint256 public constant VOTING_PERIOD = 3 days;\\n    uint256 public constant MIN_TOKENS_TO_PROPOSE = 100 * 10**18; // 100 tokens\\n    \\n    mapping(uint256 => Proposal) public proposals;\\n    uint256 public proposalCount;\\n    \\n    event ProposalCreated(\\n        uint256 indexed proposalId,\\n        string agentHash,\\n        string description,\\n        address proposer\\n    );\\n    event VoteCast(\\n        uint256 indexed proposalId,\\n        address voter,\\n        bool support\\n    );\\n    event ProposalExecuted(\\n        uint256 indexed proposalId,\\n        string agentHash,\\n        bool accepted\\n    );\\n    \\n    constructor(address _musicToken, address _agentRegistry) {\\n        musicToken = IERC20(_musicToken);\\n        agentRegistry = IAIAgentRegistry(_agentRegistry);\\n    }\\n    \\n    function createProposal(\\n        string memory agentHash,\\n        string memory description,\\n        string memory ipfsMetadata\\n    ) external nonReentrant {\\n        require(\\n            musicToken.balanceOf(msg.sender) >= MIN_TOKENS_TO_PROPOSE,\\n            \\\"Not enough tokens to propose\\\"\\n        );\\n        \\n        // Check if agent exists and is listed in the TCR\\n        (,,,, bool isListed,,,,,,) = agentRegistry.aiAgents(agentHash);\\n        require(isListed, \\\"Agent not listed in TCR\\\");\\n        \\n        proposalCount++;\\n        Proposal storage proposal = proposals[proposalCount];\\n        \\n        proposal.id = proposalCount;\\n        proposal.proposer = msg.sender;\\n        proposal.agentHash = agentHash;\\n        proposal.description = description;\\n        proposal.ipfsMetadata = ipfsMetadata;\\n        proposal.startTime = block.timestamp;\\n        proposal.endTime = block.timestamp + VOTING_PERIOD;\\n        \\n        emit ProposalCreated(\\n            proposalCount,\\n            agentHash,\\n            description,\\n            msg.sender\\n        );\\n    }\\n    \\n    function createStrategyProposal(\\n        string memory agentHash,\\n        string memory description,\\n        string memory ipfsMetadata,\\n        string memory newStrategyHash\\n    ) external nonReentrant {\\n        require(\\n            musicToken.balanceOf(msg.sender) >= MIN_TOKENS_TO_PROPOSE,\\n            \\\"Not enough tokens to propose\\\"\\n        );\\n        \\n        // Check if agent exists and is listed in the TCR\\n        (,,,, bool isListed,,,,,,) = agentRegistry.aiAgents(agentHash);\\n        require(isListed, \\\"Agent not listed in TCR\\\");\\n        \\n        proposalCount++;\\n        Proposal storage proposal = proposals[proposalCount];\\n        \\n        proposal.id = proposalCount;\\n        proposal.proposer = msg.sender;\\n        proposal.agentHash = agentHash;\\n        proposal.description = description;\\n        proposal.ipfsMetadata = ipfsMetadata;\\n        proposal.newStrategyHash = newStrategyHash;\\n        proposal.proposalType = ProposalType.STRATEGY_UPDATE;\\n        proposal.startTime = block.timestamp;\\n        proposal.endTime = block.timestamp + VOTING_PERIOD;\\n        \\n        emit ProposalCreated(\\n            proposalCount,\\n            agentHash,\\n            description,\\n            msg.sender\\n        );\\n    }\\n    \\n    function vote(uint256 proposalId, bool support) external nonReentrant {\\n        Proposal storage proposal = proposals[proposalId];\\n        \\n        require(block.timestamp <= proposal.endTime, \\\"Voting ended\\\");\\n        require(!proposal.hasVoted[msg.sender], \\\"Already voted\\\");\\n        \\n        // Check if agent is still listed when voting\\n        (,,,, bool isListed,,,,,,) = agentRegistry.aiAgents(proposal.agentHash);\\n        require(isListed, \\\"Agent no longer listed in TCR\\\");\\n        \\n        uint256 voterPower = musicToken.balanceOf(msg.sender);\\n        require(voterPower > 0, \\\"No voting power\\\");\\n        \\n        if (support) {\\n            proposal.votesFor += voterPower;\\n        } else {\\n            proposal.votesAgainst += voterPower;\\n        }\\n        \\n        proposal.hasVoted[msg.sender] = true;\\n        \\n        emit VoteCast(proposalId, msg.sender, support);\\n    }\\n    \\n    function executeProposal(uint256 proposalId) external nonReentrant {\\n        Proposal storage proposal = proposals[proposalId];\\n        \\n        require(block.timestamp > proposal.endTime, \\\"Voting still active\\\");\\n        require(!proposal.executed, \\\"Already executed\\\");\\n        \\n        // Check if agent is still listed when executing\\n        (,,,, bool isListed,,,,,,) = agentRegistry.aiAgents(proposal.agentHash);\\n        require(isListed, \\\"Agent no longer listed in TCR\\\");\\n        \\n        bool accepted = proposal.votesFor > proposal.votesAgainst;\\n        proposal.executed = true;\\n\\n        if (accepted && proposal.proposalType == ProposalType.STRATEGY_UPDATE) {\\n            // Update the agent's strategy if proposal is accepted\\n             IAIAgentRegistry(address(agentRegistry)).updateAgentStrategy(\\n                proposal.agentHash,\\n                proposal.newStrategyHash\\n            );\\n        }\\n        \\n        emit ProposalExecuted(proposalId, proposal.agentHash, accepted);\\n    }\\n    \\n    // View functions\\n    function getProposal(uint256 proposalId) external view returns (\\n        address proposer,\\n        string memory agentHash,\\n        string memory description,\\n        string memory ipfsMetadata,\\n        uint256 votesFor,\\n        uint256 votesAgainst,\\n        uint256 endTime,\\n        bool executed\\n    ) {\\n        Proposal storage proposal = proposals[proposalId];\\n        return (\\n            proposal.proposer,\\n            proposal.agentHash,\\n            proposal.description,\\n            proposal.ipfsMetadata,\\n            proposal.votesFor,\\n            proposal.votesAgainst,\\n            proposal.endTime,\\n            proposal.executed\\n        );\\n    }\\n    \\n    function hasVoted(uint256 proposalId, address voter) external view returns (bool) {\\n        return proposals[proposalId].hasVoted[voter];\\n    }\\n}\",\"keccak256\":\"0x0b8815941e8e28d50ca47b80116c6614d55de6576a78deb41120689598618a2e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100c957601f62001c5638819003918201601f19168301916001600160401b038311848410176100ce5780849260409485528339810103126100c957610053602061004c836100e4565b92016100e4565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180551683600254161760025516906003541617600355611b5d9081620000f98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100c95756fe6080604052600436101561001257600080fd5b6000803560e01c8063013cf08b146114b95780630d1cfcae146114905780630d61b5191461123657806343859632146111e1578063583cf37914610cbb578063715018a614610c615780638da5cb5b14610c3a578063b1610d7e14610c1c578063b6de6d1f14610bf8578063be8dada614610514578063c7f758a814610450578063c9d27afe146101d8578063da35c664146101ba578063eb3c79da146101915763f2fde38b146100c257600080fd5b3461018e57602036600319011261018e576004356001600160a01b0381811691829003610189576100f16117a6565b811561013557600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080fd5b80fd5b503461018e578060031936011261018e576002546040516001600160a01b039091168152602090f35b503461018e578060031936011261018e576020600554604051908152f35b503461018e57604036600319011261018e57600435602480358015159081810361044c576102046119ef565b83855260209260048452604086206008810154421161041957600c8101923360005283865260ff604060002054166103e55760035460405163d149bb1360e01b815260048101889052906001600160a01b03908a9083908316818061026e8a820160028b01611a45565b03915afa9081156103da5761028d899287948d916103ad575b50611adb565b60025416604051958680926370a0823160e01b82523360048301525afa9384156103a2578994610373575b50831561033e5750917fe71fcdac32df1877c1700e7bda2a03157e20993363a28fc35ac495cefc76e4d4959391604095936000146103285760056102ff91019182546119a8565b90555b33600052825282600020600160ff19825416179055825191338352820152a26001805580f35b600661033791019182546119a8565b9055610302565b86600f6064926040519262461bcd60e51b845260048401528201526e2737903b37ba34b733903837bbb2b960891b6044820152fd5b9093508681813d831161039b575b61038b818361161f565b81010312610189575192386102b8565b503d610381565b6040513d8b823e3d90fd5b6103c991503d808f833e6103c1818361161f565b8101906118a3565b505050505050935050505038610287565b6040513d8c823e3d90fd5b60405162461bcd60e51b815260048101879052600d818501526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b60405162461bcd60e51b815260048101869052600c818401526b159bdd1a5b99c8195b99195960a21b6044820152606490fd5b8480fd5b503461018e57602036600319011261018e57604090600435815260046020522060018060a01b0360018201541660058201546006830154600884015460ff600986015416916104f96104a460028801611656565b966104eb6104c060046104b960038501611656565b9301611656565b916104dd6040519a8b9a8b526101008060208d01528b019061171f565b9089820360408b015261171f565b90878203606089015261171f565b93608086015260a085015260c0840152151560e08301520390f35b503461018e57608036600319011261018e576004356001600160401b038111610bf45761054590369060040161175f565b6024356001600160401b038111610bf05761056490369060040161175f565b906044356001600160401b038111610bec5761058490369060040161175f565b6064356001600160401b03811161044c576105a390369060040161175f565b6105ab6119ef565b6002546040516370a0823160e01b81523360048201526001600160a01b03916020908290602490829086165afa908115610be1578791610ba6575b5068056bc75e2d631000006105fc9110156117fe565b6003541685604051809263d149bb1360e01b8252602060048301528180610626602482018a61171f565b03915afa8015610b9b57610641918791610b76575b50611937565b61064c600554611983565b918260055582865260046020526040862092835560018301336001600160601b0360a01b82541617905583516001600160401b0381116109f05761069360028501546115e5565b601f8111610b32575b50806020601f8211600114610ac8578891610abd575b508160011b916000199060031b1c19161760028401555b84516001600160401b0381116109f0576106e660038501546115e5565b601f8111610a79575b50806020601f8211600114610a0f578891610a04575b508160011b916000199060031b1c19161760038401555b8051906001600160401b0382116109f057819061073c60048601546115e5565b601f81116109a0575b50602090601f8311600114610931578892610926575b50508160011b916000199060031b1c19161760048301555b8051906001600160401b038211610912578190610793600a8501546115e5565b601f81116108c2575b50602090601f8311600114610853578792610848575b50508160011b916000199060031b1c191617600a8201555b600b8101600160ff198254161790554260078201556203f480420190814211610834579060087ff5aabab57cdd7d0e77da8679aa7b11fbcd0b690cafe5eb948e7a31af3cdf1aa6939201556005549261082a6040519283923391846119b5565b0390a26001805580f35b634e487b7160e01b85526011600452602485fd5b0151905038806107b2565b9250600a84018752602087209087935b601f19841685106108a7576001945083601f1981161061088e575b505050811b01600a8201556107ca565b015160001960f88460031b161c1916905538808061087e565b81810151835560209485019460019093019290910190610863565b909150600a8401875260208720601f840160051c81016020851061090b575b90849392915b601f830160051c820181106108fd57505061079c565b8981558594506001016108e7565b50806108e1565b634e487b7160e01b86526041600452602486fd5b01519050388061075b565b9250600485018852602088209088935b601f1984168510610985576001945083601f1981161061096c575b505050811b016004830155610773565b015160001960f88460031b161c1916905538808061095c565b81810151835560209485019460019093019290910190610941565b90915060048501885260208820601f840160051c8101602085106109e9575b90849392915b601f830160051c820181106109db575050610745565b8a81558594506001016109c5565b50806109bf565b634e487b7160e01b87526041600452602487fd5b905086015138610705565b91506003850188526020882088925b601f1983168410610a61576001935082601f19811610610a48575b5050811b01600384015561071c565b88015160001960f88460031b161c191690553880610a39565b88810151825560209384019360019092019101610a1e565b60038501885260208820601f830160051c810160208410610ab6575b601f830160051c82018110610aab5750506106ef565b898155600101610a95565b5080610a95565b9050850151386106b2565b91506002850188526020882088925b601f1983168410610b1a576001935082601f19811610610b01575b5050811b0160028401556106c9565b87015160001960f88460031b161c191690553880610af2565b87810151825560209384019360019092019101610ad7565b60028501885260208820601f830160051c810160208410610b6f575b601f830160051c82018110610b6457505061069c565b898155600101610b4e565b5080610b4e565b610b8a91503d8089833e6103c1818361161f565b50505050505093505050503861063b565b6040513d88823e3d90fd5b90506020813d602011610bd9575b81610bc16020938361161f565b81010312610189575168056bc75e2d631000006105e6565b3d9150610bb4565b6040513d89823e3d90fd5b8380fd5b8280fd5b5080fd5b503461018e578060031936011261018e57602060405168056bc75e2d631000008152f35b503461018e578060031936011261018e5760206040516203f4808152f35b503461018e578060031936011261018e57546040516001600160a01b039091168152602090f35b503461018e578060031936011261018e57610c7a6117a6565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461018e57606036600319011261018e576004356001600160401b038111610bf457610cec90369060040161175f565b6024356001600160401b038111610bf057610d0b90369060040161175f565b906044356001600160401b038111610bec57610d2b90369060040161175f565b610d336119ef565b6002546040516370a0823160e01b81523360048201526001600160a01b03916020908290602490829086165afa908115610b9b5786916111a6575b5068056bc75e2d63100000610d849110156117fe565b6003541684604051809263d149bb1360e01b8252602060048301528180610dae602482018961171f565b03915afa801561119b57610dc89186916111875750611937565b610dd3600554611983565b908160055581855260046020526040852091825560018201336001600160601b0360a01b82541617905582516001600160401b03811161091257610e1a60028401546115e5565b601f8111611143575b50806020601f82116001146110d95787916110ce575b508160011b916000199060031b1c19161760028301555b83516001600160401b03811161091257610e6d60038401546115e5565b601f811161108a575b50806020601f8211600114611020578791611015575b508160011b916000199060031b1c19161760038301555b8051906001600160401b038211610912578190610ec360048501546115e5565b601f8111610fc5575b50602090601f8311600114610f56578792610f4b575b50508160011b916000199060031b1c19161760048201555b4260078201556203f480420190814211610834579060087ff5aabab57cdd7d0e77da8679aa7b11fbcd0b690cafe5eb948e7a31af3cdf1aa6939201556005549261082a6040519283923391846119b5565b015190503880610ee2565b9250600484018752602087209087935b601f1984168510610faa576001945083601f19811610610f91575b505050811b016004820155610efa565b015160001960f88460031b161c19169055388080610f81565b81810151835560209485019460019093019290910190610f66565b90915060048401875260208720601f840160051c81016020851061100e575b90849392915b601f830160051c82018110611000575050610ecc565b898155859450600101610fea565b5080610fe4565b905085015138610e8c565b91506003840187526020872087925b601f1983168410611072576001935082601f19811610611059575b5050811b016003830155610ea3565b87015160001960f88460031b161c19169055388061104a565b8781015182556020938401936001909201910161102f565b60038401875260208720601f830160051c8101602084106110c7575b601f830160051c820181106110bc575050610e76565b8881556001016110a6565b50806110a6565b905084015138610e39565b91506002840187526020872087925b601f198316841061112b576001935082601f19811610611112575b5050811b016002830155610e50565b86015160001960f88460031b161c191690553880611103565b868101518255602093840193600190920191016110e8565b60028401875260208720601f830160051c810160208410611180575b601f830160051c82018110611175575050610e23565b88815560010161115f565b508061115f565b610b8a91503d8088833e6103c1818361161f565b6040513d87823e3d90fd5b90506020813d6020116111d9575b816111c16020938361161f565b81010312610189575168056bc75e2d63100000610d6e565b3d91506111b4565b503461018e57604036600319011261018e576024356001600160a01b0381169190829003610189576040600c9160043581526004602052200190600052602052602060ff604060002054166040519015158152f35b503461018e5760206003198181360112610bf057600435916112566119ef565b8284526004815260408420600881015442111561145557600981019283549160ff831661141d5760035460405163d149bb1360e01b81526004810186905260028301968993926001600160a01b03929085908290851681806112bb602482018f611a45565b03915afa801561119b576112d59186916114095750611adb565b600160058401546006850154109660ff191617905584806113d4575b611341575b82887f679d7dec861244ab21da38e3bde3f8be329e6f26900d21e9246d13c7ac935d646113338a8a8a604051938493604085526040850190611a45565b918301520390a26001805580f35b60035416803b15610bf05761137c838861138c600a976040519889978896879563c3bb929f60e01b8752604060048801526044870190611a45565b9285840301602486015201611a45565b03925af18015610b9b576113a3575b8581806112f6565b6001600160401b0381969296116113c0576040529361133361139b565b634e487b7160e01b82526041600452602482fd5b5090915060ff600b8301541660028110156113f557906001899392146112f1565b634e487b7160e01b89526021600452602489fd5b6103c991503d8088833e6103c1818361161f565b60405162461bcd60e51b815260048101859052601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018390526013602482015272566f74696e67207374696c6c2061637469766560681b6044820152606490fd5b503461018e578060031936011261018e576003546040516001600160a01b039091168152602090f35b503461018e57602036600319011261018e57600480358252602052604081208054600182015490916001600160a01b03909116906114f960028201611656565b61150560038301611656565b9061151260048401611656565b916005840154926006850154600786015491600887015493600988015460ff1695600a890161154090611656565b98600b015460ff16996040519b8c5260208c01526101808060408d01528b016115689161171f565b8a810360608c01526115799161171f565b89810360808b015261158a9161171f565b9460a089015260c088015260e087015261010086015215156101208501528381036101408501526115ba9161171f565b9060028110156115d1578293506101608301520390f35b634e487b7160e01b84526021600452602484fd5b90600182811c92168015611615575b60208310146115ff57565b634e487b7160e01b600052602260045260246000fd5b91607f16916115f4565b90601f801991011681019081106001600160401b0382111761164057604052565b634e487b7160e01b600052604160045260246000fd5b906040519182600082549261166a846115e5565b9081845260019485811690816000146116d95750600114611696575b50506116949250038361161f565b565b9093915060005260209081600020936000915b8183106116c157505061169493508201013880611686565b855488840185015294850194879450918301916116a9565b91505061169494506020925060ff191682840152151560051b8201013880611686565b60005b83811061170f5750506000910152565b81810151838201526020016116ff565b90602091611738815180928185528580860191016116fc565b601f01601f1916010190565b6001600160401b03811161164057601f01601f191660200190565b81601f820112156101895780359061177682611744565b92611784604051948561161f565b8284526020838301011161018957816000926020809301838601378301015290565b6000546001600160a01b031633036117ba57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561180557565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320746f2070726f706f7365000000006044820152606490fd5b51906001600160a01b038216820361018957565b81601f8201121561018957805161187481611744565b92611882604051948561161f565b81845260208284010111610189576118a091602080850191016116fc565b90565b9161016083830312610189576118b88361184a565b9260208101516001600160401b039081811161018957846118da91840161185e565b936040830151918211610189576118f291830161185e565b9160608201519160808101518015158103610189579160a08201519161191a60c0820161184a565b9160e0820151916101008101519161014061012083015192015190565b1561193e57565b60405162461bcd60e51b815260206004820152601760248201527f4167656e74206e6f74206c697374656420696e205443520000000000000000006044820152606490fd5b60001981146119925760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161199257565b916119df906119d160409396959660608652606086019061171f565b90848203602086015261171f565b6001600160a01b03909416910152565b600260015414611a00576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9060009291805491611a56836115e5565b918282526001938481169081600014611ab85750600114611a78575b50505050565b90919394506000526020928360002092846000945b838610611aa4575050505001019038808080611a72565b805485870183015294019385908201611a8d565b9294505050602093945060ff191683830152151560051b01019038808080611a72565b15611ae257565b60405162461bcd60e51b815260206004820152601d60248201527f4167656e74206e6f206c6f6e676572206c697374656420696e205443520000006044820152606490fdfea2646970667358221220e5939671cb651cb56c8988d6328a27661ea4826811ceb1e78135c2d0a8d5a82164736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8063013cf08b146114b95780630d1cfcae146114905780630d61b5191461123657806343859632146111e1578063583cf37914610cbb578063715018a614610c615780638da5cb5b14610c3a578063b1610d7e14610c1c578063b6de6d1f14610bf8578063be8dada614610514578063c7f758a814610450578063c9d27afe146101d8578063da35c664146101ba578063eb3c79da146101915763f2fde38b146100c257600080fd5b3461018e57602036600319011261018e576004356001600160a01b0381811691829003610189576100f16117a6565b811561013557600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080fd5b80fd5b503461018e578060031936011261018e576002546040516001600160a01b039091168152602090f35b503461018e578060031936011261018e576020600554604051908152f35b503461018e57604036600319011261018e57600435602480358015159081810361044c576102046119ef565b83855260209260048452604086206008810154421161041957600c8101923360005283865260ff604060002054166103e55760035460405163d149bb1360e01b815260048101889052906001600160a01b03908a9083908316818061026e8a820160028b01611a45565b03915afa9081156103da5761028d899287948d916103ad575b50611adb565b60025416604051958680926370a0823160e01b82523360048301525afa9384156103a2578994610373575b50831561033e5750917fe71fcdac32df1877c1700e7bda2a03157e20993363a28fc35ac495cefc76e4d4959391604095936000146103285760056102ff91019182546119a8565b90555b33600052825282600020600160ff19825416179055825191338352820152a26001805580f35b600661033791019182546119a8565b9055610302565b86600f6064926040519262461bcd60e51b845260048401528201526e2737903b37ba34b733903837bbb2b960891b6044820152fd5b9093508681813d831161039b575b61038b818361161f565b81010312610189575192386102b8565b503d610381565b6040513d8b823e3d90fd5b6103c991503d808f833e6103c1818361161f565b8101906118a3565b505050505050935050505038610287565b6040513d8c823e3d90fd5b60405162461bcd60e51b815260048101879052600d818501526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b60405162461bcd60e51b815260048101869052600c818401526b159bdd1a5b99c8195b99195960a21b6044820152606490fd5b8480fd5b503461018e57602036600319011261018e57604090600435815260046020522060018060a01b0360018201541660058201546006830154600884015460ff600986015416916104f96104a460028801611656565b966104eb6104c060046104b960038501611656565b9301611656565b916104dd6040519a8b9a8b526101008060208d01528b019061171f565b9089820360408b015261171f565b90878203606089015261171f565b93608086015260a085015260c0840152151560e08301520390f35b503461018e57608036600319011261018e576004356001600160401b038111610bf45761054590369060040161175f565b6024356001600160401b038111610bf05761056490369060040161175f565b906044356001600160401b038111610bec5761058490369060040161175f565b6064356001600160401b03811161044c576105a390369060040161175f565b6105ab6119ef565b6002546040516370a0823160e01b81523360048201526001600160a01b03916020908290602490829086165afa908115610be1578791610ba6575b5068056bc75e2d631000006105fc9110156117fe565b6003541685604051809263d149bb1360e01b8252602060048301528180610626602482018a61171f565b03915afa8015610b9b57610641918791610b76575b50611937565b61064c600554611983565b918260055582865260046020526040862092835560018301336001600160601b0360a01b82541617905583516001600160401b0381116109f05761069360028501546115e5565b601f8111610b32575b50806020601f8211600114610ac8578891610abd575b508160011b916000199060031b1c19161760028401555b84516001600160401b0381116109f0576106e660038501546115e5565b601f8111610a79575b50806020601f8211600114610a0f578891610a04575b508160011b916000199060031b1c19161760038401555b8051906001600160401b0382116109f057819061073c60048601546115e5565b601f81116109a0575b50602090601f8311600114610931578892610926575b50508160011b916000199060031b1c19161760048301555b8051906001600160401b038211610912578190610793600a8501546115e5565b601f81116108c2575b50602090601f8311600114610853578792610848575b50508160011b916000199060031b1c191617600a8201555b600b8101600160ff198254161790554260078201556203f480420190814211610834579060087ff5aabab57cdd7d0e77da8679aa7b11fbcd0b690cafe5eb948e7a31af3cdf1aa6939201556005549261082a6040519283923391846119b5565b0390a26001805580f35b634e487b7160e01b85526011600452602485fd5b0151905038806107b2565b9250600a84018752602087209087935b601f19841685106108a7576001945083601f1981161061088e575b505050811b01600a8201556107ca565b015160001960f88460031b161c1916905538808061087e565b81810151835560209485019460019093019290910190610863565b909150600a8401875260208720601f840160051c81016020851061090b575b90849392915b601f830160051c820181106108fd57505061079c565b8981558594506001016108e7565b50806108e1565b634e487b7160e01b86526041600452602486fd5b01519050388061075b565b9250600485018852602088209088935b601f1984168510610985576001945083601f1981161061096c575b505050811b016004830155610773565b015160001960f88460031b161c1916905538808061095c565b81810151835560209485019460019093019290910190610941565b90915060048501885260208820601f840160051c8101602085106109e9575b90849392915b601f830160051c820181106109db575050610745565b8a81558594506001016109c5565b50806109bf565b634e487b7160e01b87526041600452602487fd5b905086015138610705565b91506003850188526020882088925b601f1983168410610a61576001935082601f19811610610a48575b5050811b01600384015561071c565b88015160001960f88460031b161c191690553880610a39565b88810151825560209384019360019092019101610a1e565b60038501885260208820601f830160051c810160208410610ab6575b601f830160051c82018110610aab5750506106ef565b898155600101610a95565b5080610a95565b9050850151386106b2565b91506002850188526020882088925b601f1983168410610b1a576001935082601f19811610610b01575b5050811b0160028401556106c9565b87015160001960f88460031b161c191690553880610af2565b87810151825560209384019360019092019101610ad7565b60028501885260208820601f830160051c810160208410610b6f575b601f830160051c82018110610b6457505061069c565b898155600101610b4e565b5080610b4e565b610b8a91503d8089833e6103c1818361161f565b50505050505093505050503861063b565b6040513d88823e3d90fd5b90506020813d602011610bd9575b81610bc16020938361161f565b81010312610189575168056bc75e2d631000006105e6565b3d9150610bb4565b6040513d89823e3d90fd5b8380fd5b8280fd5b5080fd5b503461018e578060031936011261018e57602060405168056bc75e2d631000008152f35b503461018e578060031936011261018e5760206040516203f4808152f35b503461018e578060031936011261018e57546040516001600160a01b039091168152602090f35b503461018e578060031936011261018e57610c7a6117a6565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461018e57606036600319011261018e576004356001600160401b038111610bf457610cec90369060040161175f565b6024356001600160401b038111610bf057610d0b90369060040161175f565b906044356001600160401b038111610bec57610d2b90369060040161175f565b610d336119ef565b6002546040516370a0823160e01b81523360048201526001600160a01b03916020908290602490829086165afa908115610b9b5786916111a6575b5068056bc75e2d63100000610d849110156117fe565b6003541684604051809263d149bb1360e01b8252602060048301528180610dae602482018961171f565b03915afa801561119b57610dc89186916111875750611937565b610dd3600554611983565b908160055581855260046020526040852091825560018201336001600160601b0360a01b82541617905582516001600160401b03811161091257610e1a60028401546115e5565b601f8111611143575b50806020601f82116001146110d95787916110ce575b508160011b916000199060031b1c19161760028301555b83516001600160401b03811161091257610e6d60038401546115e5565b601f811161108a575b50806020601f8211600114611020578791611015575b508160011b916000199060031b1c19161760038301555b8051906001600160401b038211610912578190610ec360048501546115e5565b601f8111610fc5575b50602090601f8311600114610f56578792610f4b575b50508160011b916000199060031b1c19161760048201555b4260078201556203f480420190814211610834579060087ff5aabab57cdd7d0e77da8679aa7b11fbcd0b690cafe5eb948e7a31af3cdf1aa6939201556005549261082a6040519283923391846119b5565b015190503880610ee2565b9250600484018752602087209087935b601f1984168510610faa576001945083601f19811610610f91575b505050811b016004820155610efa565b015160001960f88460031b161c19169055388080610f81565b81810151835560209485019460019093019290910190610f66565b90915060048401875260208720601f840160051c81016020851061100e575b90849392915b601f830160051c82018110611000575050610ecc565b898155859450600101610fea565b5080610fe4565b905085015138610e8c565b91506003840187526020872087925b601f1983168410611072576001935082601f19811610611059575b5050811b016003830155610ea3565b87015160001960f88460031b161c19169055388061104a565b8781015182556020938401936001909201910161102f565b60038401875260208720601f830160051c8101602084106110c7575b601f830160051c820181106110bc575050610e76565b8881556001016110a6565b50806110a6565b905084015138610e39565b91506002840187526020872087925b601f198316841061112b576001935082601f19811610611112575b5050811b016002830155610e50565b86015160001960f88460031b161c191690553880611103565b868101518255602093840193600190920191016110e8565b60028401875260208720601f830160051c810160208410611180575b601f830160051c82018110611175575050610e23565b88815560010161115f565b508061115f565b610b8a91503d8088833e6103c1818361161f565b6040513d87823e3d90fd5b90506020813d6020116111d9575b816111c16020938361161f565b81010312610189575168056bc75e2d63100000610d6e565b3d91506111b4565b503461018e57604036600319011261018e576024356001600160a01b0381169190829003610189576040600c9160043581526004602052200190600052602052602060ff604060002054166040519015158152f35b503461018e5760206003198181360112610bf057600435916112566119ef565b8284526004815260408420600881015442111561145557600981019283549160ff831661141d5760035460405163d149bb1360e01b81526004810186905260028301968993926001600160a01b03929085908290851681806112bb602482018f611a45565b03915afa801561119b576112d59186916114095750611adb565b600160058401546006850154109660ff191617905584806113d4575b611341575b82887f679d7dec861244ab21da38e3bde3f8be329e6f26900d21e9246d13c7ac935d646113338a8a8a604051938493604085526040850190611a45565b918301520390a26001805580f35b60035416803b15610bf05761137c838861138c600a976040519889978896879563c3bb929f60e01b8752604060048801526044870190611a45565b9285840301602486015201611a45565b03925af18015610b9b576113a3575b8581806112f6565b6001600160401b0381969296116113c0576040529361133361139b565b634e487b7160e01b82526041600452602482fd5b5090915060ff600b8301541660028110156113f557906001899392146112f1565b634e487b7160e01b89526021600452602489fd5b6103c991503d8088833e6103c1818361161f565b60405162461bcd60e51b815260048101859052601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018390526013602482015272566f74696e67207374696c6c2061637469766560681b6044820152606490fd5b503461018e578060031936011261018e576003546040516001600160a01b039091168152602090f35b503461018e57602036600319011261018e57600480358252602052604081208054600182015490916001600160a01b03909116906114f960028201611656565b61150560038301611656565b9061151260048401611656565b916005840154926006850154600786015491600887015493600988015460ff1695600a890161154090611656565b98600b015460ff16996040519b8c5260208c01526101808060408d01528b016115689161171f565b8a810360608c01526115799161171f565b89810360808b015261158a9161171f565b9460a089015260c088015260e087015261010086015215156101208501528381036101408501526115ba9161171f565b9060028110156115d1578293506101608301520390f35b634e487b7160e01b84526021600452602484fd5b90600182811c92168015611615575b60208310146115ff57565b634e487b7160e01b600052602260045260246000fd5b91607f16916115f4565b90601f801991011681019081106001600160401b0382111761164057604052565b634e487b7160e01b600052604160045260246000fd5b906040519182600082549261166a846115e5565b9081845260019485811690816000146116d95750600114611696575b50506116949250038361161f565b565b9093915060005260209081600020936000915b8183106116c157505061169493508201013880611686565b855488840185015294850194879450918301916116a9565b91505061169494506020925060ff191682840152151560051b8201013880611686565b60005b83811061170f5750506000910152565b81810151838201526020016116ff565b90602091611738815180928185528580860191016116fc565b601f01601f1916010190565b6001600160401b03811161164057601f01601f191660200190565b81601f820112156101895780359061177682611744565b92611784604051948561161f565b8284526020838301011161018957816000926020809301838601378301015290565b6000546001600160a01b031633036117ba57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561180557565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320746f2070726f706f7365000000006044820152606490fd5b51906001600160a01b038216820361018957565b81601f8201121561018957805161187481611744565b92611882604051948561161f565b81845260208284010111610189576118a091602080850191016116fc565b90565b9161016083830312610189576118b88361184a565b9260208101516001600160401b039081811161018957846118da91840161185e565b936040830151918211610189576118f291830161185e565b9160608201519160808101518015158103610189579160a08201519161191a60c0820161184a565b9160e0820151916101008101519161014061012083015192015190565b1561193e57565b60405162461bcd60e51b815260206004820152601760248201527f4167656e74206e6f74206c697374656420696e205443520000000000000000006044820152606490fd5b60001981146119925760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921161199257565b916119df906119d160409396959660608652606086019061171f565b90848203602086015261171f565b6001600160a01b03909416910152565b600260015414611a00576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9060009291805491611a56836115e5565b918282526001938481169081600014611ab85750600114611a78575b50505050565b90919394506000526020928360002092846000945b838610611aa4575050505001019038808080611a72565b805485870183015294019385908201611a8d565b9294505050602093945060ff191683830152151560051b01019038808080611a72565b15611ae257565b60405162461bcd60e51b815260206004820152601d60248201527f4167656e74206e6f206c6f6e676572206c697374656420696e205443520000006044820152606490fdfea2646970667358221220e5939671cb651cb56c8988d6328a27661ea4826811ceb1e78135c2d0a8d5a82164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2076,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "musicToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)842"
      },
      {
        "astId": 2079,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "agentRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IAIAgentRegistry)2069"
      },
      {
        "astId": 2127,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Proposal)2109_storage)"
      },
      {
        "astId": 2129,
        "contract": "contracts/AgentGovernance.sol:AgentGovernance",
        "label": "proposalCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAIAgentRegistry)2069": {
        "encoding": "inplace",
        "label": "contract IAIAgentRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)842": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalType)2112": {
        "encoding": "inplace",
        "label": "enum AgentGovernance.ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)2109_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AgentGovernance.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)2109_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)2109_storage": {
        "encoding": "inplace",
        "label": "struct AgentGovernance.Proposal",
        "members": [
          {
            "astId": 2081,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2083,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2085,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "agentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2087,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2089,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "ipfsMetadata",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2091,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "votesFor",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2093,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "votesAgainst",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2095,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "startTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2097,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "endTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2099,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "executed",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 2101,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "newStrategyHash",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2104,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "proposalType",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(ProposalType)2112"
          },
          {
            "astId": 2108,
            "contract": "contracts/AgentGovernance.sol:AgentGovernance",
            "label": "hasVoted",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}